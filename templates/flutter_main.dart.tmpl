// Flutter Template Generated by Golden WebView App Plugin
// Template Version: 8.0 - INTERNAL WEBVIEW SOLUTION
// Generated at: 2025-09-09 23:14:55
// INTERNAL WEBVIEW: Opens website inside app automatically
// No browser toolbar, fullscreen WebView experience
// Auto-loads after splash without user interaction
import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:webview_flutter_android/webview_flutter_android.dart';
import 'package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart';

void main() {
  runApp(const WebViewApp());
}

class WebViewApp extends StatelessWidget {
  const WebViewApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: const String.fromEnvironment('GWA_APP_NAME', defaultValue: 'GoldenApp'),
      theme: ThemeData(
        primarySwatch: Colors.blue,
        fontFamily: const String.fromEnvironment('GWA_APP_FONT', defaultValue: 'Cairo'),
      ),
      home: const LauncherScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class WebViewMainScreen extends StatefulWidget {
  const WebViewMainScreen({super.key});

  @override
  State<WebViewMainScreen> createState() => _WebViewMainScreenState();
}

class _WebViewMainScreenState extends State<WebViewMainScreen> {
  late String _siteUrl;
  late WebViewController _webViewController;
  bool _isLoading = true;
  String _loadingMessage = 'جاري تحضير الموقع...';
  final int _splashDelay = int.tryParse(const String.fromEnvironment('GWA_SPLASH_DELAY', defaultValue: '30')) ?? 30;

  // State variables
  bool _showSplash = true;
  bool _isLaunching = false;

  @override
  void initState() {
    super.initState();
    // Try multiple environment variable names to ensure we get the URL
    String rawUrl = const String.fromEnvironment('SITE_URL', 
        defaultValue: const String.fromEnvironment('GWA_SITE_URL', 
        defaultValue: 'https://google.com'));
    _siteUrl = _ensureScheme(rawUrl);
    print('[DEBUG] Raw URL from environment: $rawUrl');
    print('[DEBUG] Final processed Site URL: $_siteUrl');
    print('[DEBUG] Available environment variables:');
    print('[DEBUG] SITE_URL: ' + const String.fromEnvironment('SITE_URL', defaultValue: 'NOT_FOUND'));
    print('[DEBUG] GWA_SITE_URL: ' + const String.fromEnvironment('GWA_SITE_URL', defaultValue: 'NOT_FOUND'));
    
    _initializeWebView();
    
    // تحميل الموقع تلقائياً بعد تحميل الواجهة
    WidgetsBinding.instance.addPostFrameCallback((_) {
      Timer(const Duration(milliseconds: 1500), () {
        _loadWebsite();
      });
    });
  }

  void _initializeWebView() {
    late final PlatformWebViewControllerCreationParams params;
    if (WebViewPlatform.instance is WebKitWebViewPlatform) {
      params = WebKitWebViewControllerCreationParams(
        allowsInlineMediaPlayback: true,
        mediaTypesRequiringUserAction: const <PlaybackMediaTypes>{},
      );
    } else {
      params = const PlatformWebViewControllerCreationParams();
    }

    final WebViewController controller =
        WebViewController.fromPlatformCreationParams(params);
    
    controller
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setBackgroundColor(const Color(0x00000000))
      ..setUserAgent('Mozilla/5.0 (Linux; Android 12; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.6099.210 Mobile Safari/537.36 GoldenWebView/1.0')
      ..enableZoom(true)
      
      // إعدادات الأمان والشبكة  
      ..addJavaScriptChannel('GoldenApp', onMessageReceived: (JavaScriptMessage msg) {
        print('[WebView] JavaScript message: ${msg.message}');
      })
      ..setNavigationDelegate(
        NavigationDelegate(
          onProgress: (int progress) {
            setState(() {
              if (progress < 100) {
                _loadingMessage = 'جاري التحميل... $progress%';
              }
            });
          },
          onPageStarted: (String url) {
            print('[WebView] Page started loading: $url');
            setState(() {
              _isLoading = true;
              _loadingMessage = 'جاري تحميل الصفحة...';
            });
          },
          onPageFinished: (String url) {
            print('[WebView] Page finished loading: $url');
            setState(() {
              _isLoading = false;
            });
          },
          onWebResourceError: (WebResourceError error) {
            print('[WebView] Resource error: ${error.description} for ${error.url}');
            print('[WebView] Error type: ${error.errorType}');
            setState(() {
              _isLoading = false;
              _loadingMessage = 'خطأ شبكة: ${error.description}\nالرابط: ${error.url}';
            });
            
            // إذا كان خطأ SSL أو شهادة، جرب HTTP بدلاً من HTTPS
            if (error.description?.contains('SSL') == true || 
                error.description?.contains('certificate') == true ||
                error.description?.contains('ERR_CLEARTEXT_NOT_PERMITTED') == true) {
              print('[WebView] SSL/Certificate error detected, trying HTTP fallback');
              _tryHttpFallback();
            }
          },
          onHttpError: (HttpResponseError error) {
            print('[WebView] HTTP error: ${error.response?.statusCode}');
            print('[WebView] HTTP error URL: ${error.request?.uri}');
            setState(() {
              _isLoading = false;
              _loadingMessage = 'خطأ HTTP ${error.response?.statusCode ?? "غير معروف"}\nالرابط: ${error.request?.uri}';
            });
          },
          onNavigationRequest: (NavigationRequest request) {
            print('[WebView] Navigation request: ${request.url}');
            // السماح لجميع التنقلات
            return NavigationDecision.navigate;
          },
        ),
      );

    // تكوين محدد للـ Android
    if (controller.platform is AndroidWebViewController) {
      AndroidWebViewController.enableDebugging(true);
      final androidController = controller.platform as AndroidWebViewController;
      
      // إعدادات شاملة لحل مشاكل الشبكة والكاش
      androidController.setMediaPlaybackRequiresUserGesture(false);
      
      // تفعيل DOM storage و File Access
      androidController.setOnShowFileSelector((FileSelectorParams params) async {
        return [];
      });
      
      // تم إزالة setOnPermissionRequest لعدم توفره في الإصدار الحالي
      // سيتم التعامل مع الصلاحيات عبر AndroidManifest.xml
    }

    _webViewController = controller;
  }

  String _ensureScheme(String url) {
    if (url.isEmpty) return 'https://google.com';
    url = url.trim();
    
    // If already has scheme, return as is
    if (url.startsWith('http://') || url.startsWith('https://')) {
      return url;
    }
    
    // If starts with www., add https://
    if (url.startsWith('www.')) {
      return 'https://$url';
    }
    
    // Otherwise, add https:// prefix
    return 'https://$url';
  }

  Future<void> _loadWebsite() async {
    print('[WebView] Loading website: $_siteUrl');
    setState(() {
      _isLoading = true;
      _loadingMessage = 'جاري تحديد الموقع...';
    });
    
    try {
      // حل شامل لمشكلة ERR_CACHE_MISS
      await _webViewController.clearCache();
      await _webViewController.clearLocalStorage();
      
      // تحميل صفحة فارغة أولاً لتهيئة WebView
      await _webViewController.loadHtmlString('<!DOCTYPE html><html><body><p>Initializing...</p></body></html>');
      await Future.delayed(const Duration(milliseconds: 500));
      
      // تحديث حالة التحميل
      setState(() {
        _loadingMessage = 'جاري تحميل الموقع...';
      });
      
      // الحل النهائي لمشكلة ERR_CACHE_MISS
      print('[WebView] Loading external website with enhanced method');
      
      // تجربة تحميل الموقع مباشرة
      final uri = Uri.parse(_siteUrl);
      
      await _webViewController.loadRequest(uri);
      
      // إذا فشل، جرب HTTP بدلاً من HTTPS
      Timer(const Duration(seconds: 5), () {
        if (_isLoading) {
          print('[WebView] Timeout detected, trying HTTP fallback');
          _tryHttpFallback();
        }
      });
      
      print('[WebView] Website load request sent successfully');
    } catch (e) {
      print('[WebView] Error loading website: $e');
      setState(() {
        _isLoading = false;
        _loadingMessage = 'خطأ في تحميل الموقع: $e';
      });
    }
  }

  Future<void> _tryHttpFallback() async {
    if (_siteUrl.startsWith('https://')) {
      final httpUrl = _siteUrl.replaceFirst('https://', 'http://');
      print('[WebView] Trying HTTP fallback: $httpUrl');
      
      setState(() {
        _isLoading = true;
        _loadingMessage = 'جاري المحاولة باستخدام HTTP...';
      });
      
      try {
        await _webViewController.loadRequest(Uri.parse(httpUrl));
      } catch (e) {
        print('[WebView] HTTP fallback failed: $e');
        setState(() {
          _isLoading = false;
          _loadingMessage = 'فشل في تحميل الموقع. تحقق من الاتصال والرابط.';
        });
      }
    }
  }

  Future<void> _retryLoadWebsite() async {
    print('[WebView] Retrying website load for: $_siteUrl');
    setState(() {
      _isLoading = true;
      _loadingMessage = 'إعادة المحاولة...';
    });
    
    try {
      // Clear cache and try loading the site directly
      await _webViewController.clearCache();
      await _webViewController.clearLocalStorage();
      await Future.delayed(const Duration(milliseconds: 500));
      
      await _webViewController.loadRequest(Uri.parse(_siteUrl));
      print('[WebView] Retry successful for: $_siteUrl');
    } catch (e) {
      print('[WebView] Retry failed for $_siteUrl: $e');
      setState(() {
        _isLoading = false;
        _loadingMessage = 'فشل في تحميل الموقع: $_siteUrl';
      });
    }
  }
  
  // Get environment variables for customization
  String get _appName => const String.fromEnvironment('GWA_APP_NAME', defaultValue: 'Golden App');
  String get _splashBgColor => const String.fromEnvironment('GWA_SPLASH_BG_COLOR', defaultValue: '#2196F3');
  String get _splashTagline => const String.fromEnvironment('GWA_SPLASH_TAGLINE', defaultValue: 'Loading...');
  String get _splashTextTheme => const String.fromEnvironment('GWA_SPLASH_TEXT_THEME', defaultValue: 'light');
  bool get _splashDisplayLogo => const String.fromEnvironment('GWA_SPLASH_DISPLAY_LOGO', defaultValue: 'true') == 'true';
  String get _splashLogoUrl => const String.fromEnvironment('GWA_SPLASH_LOGO_URL', defaultValue: '');

  Color _parseHexColor(String hexString) {
    final buffer = StringBuffer();
    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');
    buffer.write(hexString.replaceFirst('#', ''));
    return Color(int.parse(buffer.toString(), radix: 16));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _isLoading ? _buildLoadingScreen() : _buildWebView(),
    );
  }

  Widget _buildLoadingScreen() {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: [
            _parseHexColor(_splashBgColor),
            _parseHexColor(_splashBgColor).withOpacity(0.8),
          ],
        ),
      ),
      child: SafeArea(
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Logo
              if (_splashDisplayLogo && _splashLogoUrl.isNotEmpty)
                Container(
                  margin: const EdgeInsets.only(bottom: 40),
                  child: Image.network(
                    _splashLogoUrl,
                    width: 120,
                    height: 120,
                    errorBuilder: (context, error, stackTrace) {
                      return const Icon(
                        Icons.web,
                        size: 120,
                        color: Colors.white,
                      );
                    },
                  ),
                )
              else
                Container(
                  margin: const EdgeInsets.only(bottom: 40),
                  child: const Icon(
                    Icons.language,
                    size: 120,
                    color: Colors.white,
                  ),
                ),
              
              // App Name
              Text(
                _appName,
                style: TextStyle(
                  fontSize: 32,
                  fontWeight: FontWeight.bold,
                  color: _splashTextTheme == 'dark' ? Colors.black : Colors.white,
                ),
              ),
              
              // Tagline
              const SizedBox(height: 20),
              Text(
                _splashTagline,
                style: TextStyle(
                  fontSize: 16,
                  color: (_splashTextTheme == 'dark' ? Colors.black : Colors.white).withOpacity(0.8),
                ),
                textAlign: TextAlign.center,
              ),
              
              // Loading indicator
              const SizedBox(height: 40),
              const CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
              ),
              
              // Loading message
              const SizedBox(height: 20),
              Text(
                _loadingMessage,
                style: TextStyle(
                  fontSize: 14,
                  color: (_splashTextTheme == 'dark' ? Colors.black : Colors.white).withOpacity(0.7),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildWebView() {
    return WebViewWidget(controller: _webViewController);
  }
}

class LauncherScreen extends StatefulWidget {
  const LauncherScreen({super.key});

  @override
  State<LauncherScreen> createState() => _LauncherScreenState();
}

class _LauncherScreenState extends State<LauncherScreen> {
  @override
  void initState() {
    super.initState();
    // تأخير قصير ثم الانتقال لشاشة WebView
    Timer(const Duration(milliseconds: 1000), () {
      if (mounted) {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const WebViewMainScreen()),
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final appName = const String.fromEnvironment('GWA_APP_NAME', defaultValue: 'Golden App');
    final splashBgColor = const String.fromEnvironment('GWA_SPLASH_BG_COLOR', defaultValue: '#2196F3');
    final splashTagline = const String.fromEnvironment('GWA_SPLASH_TAGLINE', defaultValue: 'Loading...');
    final splashTextTheme = const String.fromEnvironment('GWA_SPLASH_TEXT_THEME', defaultValue: 'light');
    final splashDisplayLogo = const String.fromEnvironment('GWA_SPLASH_DISPLAY_LOGO', defaultValue: 'true') == 'true';
    final splashLogoUrl = const String.fromEnvironment('GWA_SPLASH_LOGO_URL', defaultValue: '');
    
    Color parseHexColor(String hexString) {
      final buffer = StringBuffer();
      if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');
      buffer.write(hexString.replaceFirst('#', ''));
      return Color(int.parse(buffer.toString(), radix: 16));
    }

    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              parseHexColor(splashBgColor),
              parseHexColor(splashBgColor).withOpacity(0.8),
            ],
          ),
        ),
        child: SafeArea(
          child: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                // Logo
                if (splashDisplayLogo && splashLogoUrl.isNotEmpty)
                  Container(
                    margin: const EdgeInsets.only(bottom: 40),
                    child: Image.network(
                      splashLogoUrl,
                      width: 120,
                      height: 120,
                      errorBuilder: (context, error, stackTrace) {
                        return const Icon(
                          Icons.web,
                          size: 120,
                          color: Colors.white,
                        );
                      },
                    ),
                  )
                else
                  Container(
                    margin: const EdgeInsets.only(bottom: 40),
                    child: const Icon(
                      Icons.language,
                      size: 120,
                      color: Colors.white,
                    ),
                  ),
                
                // App Name
                Text(
                  appName,
                  style: TextStyle(
                    fontSize: 32,
                    fontWeight: FontWeight.bold,
                    color: splashTextTheme == 'dark' ? Colors.black : Colors.white,
                  ),
                  textAlign: TextAlign.center,
                ),
                
                const SizedBox(height: 20),
                
                // Tagline
                Text(
                  splashTagline,
                  style: TextStyle(
                    fontSize: 16,
                    color: (splashTextTheme == 'dark' ? Colors.black : Colors.white).withOpacity(0.8),
                  ),
                  textAlign: TextAlign.center,
                ),
                
                const SizedBox(height: 40),
                
                // Loading indicator
                const CircularProgressIndicator(
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
// Flutter Template Generated by Golden WebView App Plugin
// Template Version: 2.4
// Generated at: 2025-09-09 00:59:13
// Contains: _showSplash, _controller, _loading, _error variables
// WebView package: webview_flutter_android 3.16.9 compatible
// Fixed: GWA_APP_NAME using String.fromEnvironment
// Fixed: Added dart:convert import for utf8, base64, json
// Fixed: Added _ensureScheme() function to fix Missing scheme in uri error
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:webview_flutter_android/webview_flutter_android.dart';
import 'package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart';

void main() {
  runApp(const WebViewApp());
}

class WebViewApp extends StatelessWidget {
  const WebViewApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: const String.fromEnvironment('GWA_APP_NAME', defaultValue: 'netmasr'),
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: const WebViewScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class WebViewScreen extends StatefulWidget {
  const WebViewScreen({super.key});

  @override
  State<WebViewScreen> createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> {
  late final WebViewController _controller;
  
  // App configuration from environment variables
  final String _appName = const String.fromEnvironment('GWA_APP_NAME', defaultValue: 'WebView App');
  final String _siteUrl = const String.fromEnvironment('SITE_URL', defaultValue: 'https://netmasr.com/');
  final String _userAgent = const String.fromEnvironment('GWA_USER_AGENT', defaultValue: '');
  final String _themeColorHex = const String.fromEnvironment('GWA_THEME_COLOR', defaultValue: '#2196F3');
  final String _splashBgColor = const String.fromEnvironment('GWA_SPLASH_BG_COLOR', defaultValue: '#2196F3');
  final String _splashTagline = const String.fromEnvironment('GWA_SPLASH_TAGLINE', defaultValue: 'Loading...');
  final String _splashTextTheme = const String.fromEnvironment('GWA_SPLASH_TEXT_THEME', defaultValue: 'light');
  final bool _splashDisplayLogo = const String.fromEnvironment('GWA_SPLASH_DISPLAY_LOGO', defaultValue: '0') == '1';
  final String _splashLogoUrl = const String.fromEnvironment('GWA_SPLASH_LOGO_IMAGE_URL', defaultValue: '');
  final int _splashDelay = int.tryParse(const String.fromEnvironment('GWA_SPLASH_DELAY', defaultValue: '30')) ?? 30;
  final String _navItemsB64 = const String.fromEnvironment('GWA_NAV_ITEMS_B64', defaultValue: '');

  // State variables
  bool _loading = true;
  String? _error;
  bool _showSplash = true;
  String _currentUrl = '';
  int _currentIndex = 0;
  List<_NavItem> _navItems = [];

  // Default mobile user agent
  final String _defaultMobileUA = 'Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36';

  // Function to ensure URL has proper scheme
  String _ensureScheme(String url) {
    if (url.isEmpty) return 'https://google.com';
    
    // Remove any leading/trailing whitespace
    url = url.trim();
    
    // If already has scheme, return as is
    if (url.startsWith('http://') || url.startsWith('https://')) {
      return url;
    }
    
    // If starts with www., add https://
    if (url.startsWith('www.')) {
      return 'https://$url';
    }
    
    // If it's just a domain name, add https://
    if (!url.contains('://')) {
      return 'https://$url';
    }
    
    return url;
  }

  @override
  void initState() {
    super.initState();
    _initializeNavItems();
    _initializeWebView();
    _startSplashTimer();
  }

  void _initializeNavItems() {
    if (_navItemsB64.isNotEmpty) {
      try {
        final decoded = utf8.decode(base64.decode(_navItemsB64));
        final List<dynamic> items = json.decode(decoded);
        _navItems = items.map((item) => _NavItem(
          title: item['title'] ?? 'Tab',
          url: item['url'] ?? _siteUrl,
          icon: _getIconFromString(item['icon']),
        )).toList();
      } catch (e) {
        print('[Nav] Failed to decode nav items: $e');
      }
    }
  }

  IconData _getIconFromString(String? iconName) {
    switch (iconName?.toLowerCase()) {
      case 'home': return Icons.home;
      case 'search': return Icons.search;
      case 'favorite': return Icons.favorite;
      case 'settings': return Icons.settings;
      case 'person': return Icons.person;
      case 'info': return Icons.info;
      case 'help': return Icons.help;
      case 'contact': return Icons.contact_page;
      default: return Icons.web;
    }
  }

  void _startSplashTimer() {
    Future.delayed(Duration(milliseconds: _splashDelay * 100), () {
      if (mounted) {
        setState(() {
          _showSplash = false;
        });
      }
    });
  }

  void _initializeWebView() async {
    print('[WebView] Initializing...');
    
    // Platform-specific parameters
    late final PlatformWebViewControllerCreationParams params;
    if (WebViewPlatform.instance is WebKitWebViewPlatform) {
      params = WebKitWebViewControllerCreationParams(
        allowsInlineMediaPlayback: true,
        mediaTypesRequiringUserAction: const <PlaybackMediaTypes>{},
      );
    } else {
      params = const PlatformWebViewControllerCreationParams();
    }

    final WebViewController controller = WebViewController.fromPlatformCreationParams(params);
    
    // Configure WebView with enhanced settings
    _controller = controller;
    await _controller.setJavaScriptMode(JavaScriptMode.unrestricted);
    await _controller.setBackgroundColor(Colors.white);
    
    // Set user agent
    try {
      final uaToUse = _userAgent.isNotEmpty ? _userAgent : _defaultMobileUA;
      await _controller.setUserAgent(uaToUse);
      print('[WebView] User agent set: $uaToUse');
    } catch (e) {
      print('[WebView] Failed to set user agent: $e');
    }

    // Set navigation delegate
    await _controller.setNavigationDelegate(
      NavigationDelegate(
        onProgress: (int progress) {
          print('[WebView] Loading progress: $progress%');
        },
        onPageStarted: (String url) {
          print('[WebView] Page started loading: $url');
          setState(() {
            _currentUrl = url;
            _loading = true;
            _error = null;
          });
        },
        onPageFinished: (String url) {
          print('[WebView] Page finished loading: $url');
          setState(() {
            _loading = false;
          });
        },
        onWebResourceError: (WebResourceError error) {
          print('[WebView] Resource error: ${error.description}');
          setState(() {
            _loading = false;
            _error = 'خطأ في تحميل الموقع: ${error.description}';
          });
        },
      ),
    );

    // Simple Android-specific configuration - only use well-supported methods
    if (controller.platform is AndroidWebViewController) {
      try {
        AndroidWebViewController.enableDebugging(true);
        final androidController = controller.platform as AndroidWebViewController;
        await androidController.setMediaPlaybackRequiresUserGesture(false);
        print('[WebView] Android WebView configured');
      } catch (e) {
        print('[WebView] Android configuration warning: $e');
      }
    }

    _loadInitial();
  }

  Future<void> _loadInitial() async {
    print('[WebView] Starting simplified load process');
    setState(() {
      _loading = true;
      _error = null;
    });
    
    try {
      final rawUrl = _navItems.isNotEmpty ? _navItems[_currentIndex].url : _siteUrl;
      final initialUrl = _ensureScheme(rawUrl);
      print('[WebView] Raw URL: $rawUrl');
      print('[WebView] Processed URL: $initialUrl');
      
      // Wait for WebView to be ready
      await Future.delayed(const Duration(milliseconds: 800));
      
      // Direct URL loading approach - much simpler and more reliable
      final uri = Uri.parse(initialUrl);
      print('[WebView] Loading URL directly: $initialUrl');
      await _controller.loadRequest(uri);
      print('[WebView] URL load request sent');
      
    } catch (e) {
      print('[WebView] Load failed: $e');
      setState(() {
        _loading = false;
        _error = 'خطأ في تحميل الموقع: $e\n\nURL: $_siteUrl';
      });
    }
  }

  void _retryLoad() {
    print('[WebView] Retrying load...');
    _loadInitial();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Main WebView content
          if (!_showSplash)
            WebViewWidget(controller: _controller),
          
          // Loading overlay (shows during page load)
          if (_loading && !_showSplash)
            Positioned.fill(
              child: Container(
                color: Colors.white.withOpacity(0.8),
                child: const Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      CircularProgressIndicator(),
                      SizedBox(height: 16),
                      Text(
                        'جاري التحميل...',
                        style: TextStyle(fontSize: 16, color: Colors.black54),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          
          // Error overlay (only shows when there's an error)
          if (_error != null && !_showSplash)
            Positioned.fill(
              child: Container(
                color: Colors.white,
                child: Center(
                  child: Padding(
                    padding: const EdgeInsets.all(24.0),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(Icons.error_outline, size: 64, color: Colors.red),
                        const SizedBox(height: 16),
                        Text(
                          _error!,
                          textAlign: TextAlign.center,
                          style: const TextStyle(fontSize: 16, color: Colors.black87),
                        ),
                        const SizedBox(height: 24),
                        ElevatedButton(
                          onPressed: _retryLoad,
                          child: const Text('إعادة المحاولة'),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          
          // Splash screen overlay
          if (_showSplash)
            Positioned.fill(
              child: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                    colors: [
                      _parseHexColor(_splashBgColor),
                      _parseHexColor(_splashBgColor).withOpacity(0.8),
                    ],
                  ),
                ),
                child: Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      if (_splashDisplayLogo && _splashLogoUrl.isNotEmpty) ...[
                        Image.network(
                          _splashLogoUrl,
                          width: 120,
                          height: 120,
                          errorBuilder: (context, error, stackTrace) {
                            return const Icon(Icons.image, size: 120, color: Colors.white70);
                          },
                        ),
                        const SizedBox(height: 32),
                      ],
                      Text(
                        _appName,
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: _splashTextTheme == 'dark' ? Colors.black : Colors.white,
                          fontSize: 28,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 16),
                      if (_splashTagline.isNotEmpty)
                        Text(
                          _splashTagline,
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            color: _splashTextTheme == 'dark' ? Colors.black : Colors.white,
                            fontSize: 18,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                    ],
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Color _parseHexColor(String hex) {
    if (hex.isEmpty) return const Color(0xFF2196F3);
    hex = hex.replaceAll('#', '');
    if (hex.length == 6) hex = 'FF$hex';
    return Color(int.parse(hex, radix: 16));
  }
}

class _NavItem {
  final String title;
  final String url;
  final IconData icon;
  _NavItem({required this.title, required this.url, required this.icon});
}
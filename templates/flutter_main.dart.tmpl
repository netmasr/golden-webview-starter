import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:webview_flutter_android/webview_flutter_android.dart';
import 'package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart';
import 'dart:io';
import 'dart:convert';

// Config from --dart-define with safe defaults
const String _appName = String.fromEnvironment('GWA_APP_NAME', defaultValue: 'GoldenApp');
const String _themeColorHex = String.fromEnvironment('GWA_THEME_COLOR', defaultValue: '#2196f3');
const String _orientation = String.fromEnvironment('GWA_PLATFORM_ORIENTATION', defaultValue: 'system');
const String _envSiteUrl = String.fromEnvironment('GWA_SITE_URL', defaultValue: 'https://example.com/');
const String _userAgent = String.fromEnvironment('GWA_USER_AGENT', defaultValue: '');
const String _defaultMobileUA = 'Mozilla/5.0 (Linux; Android 15; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36';
const String _defaultDesktopUA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36';
// Splash
const String _splashMode = String.fromEnvironment('GWA_SPLASH_BG_MODE', defaultValue: 'color');
const String _splashBgColorHex = String.fromEnvironment('GWA_SPLASH_BG_COLOR', defaultValue: '');
const String _splashTagline = String.fromEnvironment('GWA_SPLASH_TAGLINE', defaultValue: '');
const String _splashTextTheme = String.fromEnvironment('GWA_SPLASH_TEXT_THEME', defaultValue: 'light');
const String _splashDelay = String.fromEnvironment('GWA_SPLASH_DELAY', defaultValue: '3');
const String _splashDisplayLogo = String.fromEnvironment('GWA_SPLASH_DISPLAY_LOGO', defaultValue: '0');
const String _splashBgImageUrl = String.fromEnvironment('GWA_SPLASH_BACKGROUND_IMAGE_URL', defaultValue: '');
const String _splashLogoImageUrl = String.fromEnvironment('GWA_SPLASH_LOGO_IMAGE_URL', defaultValue: '');
// Navigation
const String _navType = String.fromEnvironment('GWA_NAV_TYPE', defaultValue: 'classic');
const String _navItemsB64 = String.fromEnvironment('GWA_NAV_ITEMS_B64', defaultValue: '');

Color _parseHexColor(String hex) {
  var h = hex.replaceAll('#', '').toUpperCase();
  if (h.length == 6) h = 'FF' + h; // add alpha if missing
  return Color(int.parse(h, radix: 16));
}

String _normalizedSiteUrl(String u) {
  var s = u.trim();
  if (s.isEmpty) return 'https://example.com/';
  if (!(s.startsWith('http://') || s.startsWith('https://'))) {
    s = 'https://' + s;
  }
  return s;
}

Future<void> _applyOrientation() async {
  switch (_orientation) {
    case 'portrait':
      await SystemChrome.setPreferredOrientations([
        DeviceOrientation.portraitUp,
        DeviceOrientation.portraitDown,
      ]);
      break;
    case 'landscape':
      await SystemChrome.setPreferredOrientations([
        DeviceOrientation.landscapeLeft,
        DeviceOrientation.landscapeRight,
      ]);
      break;
    default:
      await SystemChrome.setPreferredOrientations(DeviceOrientation.values);
  }
}

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await _applyOrientation();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    final seed = _parseHexColor(_themeColorHex);
    return MaterialApp(
      title: _appName,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: seed),
        useMaterial3: true,
      ),
      home: const WebViewScreen(),
    );
  }
}

class WebViewScreen extends StatefulWidget {
  const WebViewScreen({super.key});

  @override
  State<WebViewScreen> createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> {
  late final WebViewController _controller;
  String? _error;
  bool _loading = true;
  int _splashDelaySeconds = 0;
  bool _showSplash = false;
  bool _showDebugInfo = false;
  String _currentUrl = '';
  List<_NavItem> _navItems = <_NavItem>[];
  int _currentIndex = 0;
  bool _didRetry = false;
  bool _uaDesktopFallbackApplied = false;

  final String _siteUrl = _normalizedSiteUrl(_envSiteUrl);

  @override
  void initState() {
    super.initState();
    final PlatformWebViewControllerCreationParams params = Platform.isAndroid
        ? AndroidWebViewControllerCreationParams()
        : PlatformWebViewControllerCreationParams();
    final ctrl = WebViewController.fromPlatformCreationParams(params)
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setNavigationDelegate(NavigationDelegate(
        onPageStarted: (url) => setState(() { _loading = true; _error = null; }),
        onPageFinished: (url) {
          setState(() { _loading = false; });
          _postLoadChecks();
        },
        onNavigationRequest: (request) {
          // Always navigate inside the same WebView
          return NavigationDecision.navigate;
        },
        onWebResourceError: (err) {
          print('[WebView] Resource error: ${err.errorCode} - ${err.description}');
          print('[WebView] Failed URL: ${err.url}');
          
          // Handle specific error codes
          String errorMsg = 'Connection error';
          if (err.errorCode == -2) {
            errorMsg = 'Network error: Please check your internet connection';
          } else if (err.errorCode == -6) {
            errorMsg = 'Connection refused: Server may be down';
          } else if (err.errorCode == -8) {
            errorMsg = 'Timeout: Server is taking too long to respond';
          } else {
            errorMsg = 'Error ${err.errorCode}: ${err.description ?? "Unknown error"}';
          }
          
          setState(() {
            _loading = false;
            _error = errorMsg;
          });
          
          // Only retry for network-related errors, not for all errors
          if (err.errorCode == -2 || err.errorCode == -6 || err.errorCode == -8) {
            Future.delayed(const Duration(seconds: 3), () {
              if (mounted && _error != null) {
                _retryLoad();
              }
            });
          }
        },
      ));
    try {
      final uaToUse = _userAgent.isNotEmpty ? _userAgent : _defaultMobileUA;
      ctrl.setUserAgent(uaToUse);
    } catch (_) {}
    // Configure WebView with enhanced settings
    _controller.setJavaScriptMode(JavaScriptMode.unrestricted);
    _controller.setBackgroundColor(Colors.white);
    
    // Add page load callbacks for debugging
    _controller.setNavigationDelegate(
      NavigationDelegate(
        onPageStarted: (String url) {
          print('[WebView] Page loading started: $url');
          setState(() {
            _loading = true;
            _error = null;
            _currentUrl = url;
          });
        },
        onPageFinished: (String url) {
          print('[WebView] Page loading finished: $url');
          setState(() {
            _loading = false;
            _currentUrl = url;
          });
        },
        onWebResourceError: (WebResourceError error) {
          print('[WebView] Resource error: ${error.description} (${error.errorCode})');
          if (error.errorCode == -2) { // net::ERR_NAME_NOT_RESOLVED
            setState(() {
              _error = 'No internet connection or invalid URL';
              _loading = false;
            });
          } else {
            setState(() {
              _error = 'Loading error: ${error.description}';
              _loading = false;
            });
          }
        },
        onNavigationRequest: (NavigationRequest request) {
          print('[WebView] Navigation request: ${request.url}');
          return NavigationDecision.navigate;
        },
      ),
    );
    
    // Android-specific controller setup
    if (_controller.platform is AndroidWebViewController) {
      final AndroidWebViewController aCtrl = _controller.platform as AndroidWebViewController;
      AndroidWebViewController.enableDebugging(true);
      try { 
        aCtrl.setMediaPlaybackRequiresUserGesture(false);
        // Force enable JavaScript and DOM storage
        print('[WebView] Configured Android WebView settings');
      } catch (e) {
        print('[WebView] Android config error: $e');
      }
    }
    // Note: Most Android WebView configuration methods are not available in this version
    // The following methods have been removed due to compatibility issues:
    // setDomStorageEnabled, setDatabaseEnabled, setAllowFileAccess, 
    // setAllowUniversalAccessFromFileURLs, setSafeBrowsingEnabled,
    // setJavaScriptCanOpenWindowsAutomatically, setCacheMode, setGeolocationEnabled
    _controller = ctrl;
    // Splash timer
    _splashDelaySeconds = int.tryParse(_splashDelay) ?? 0;
    _showSplash = _splashDelaySeconds > 0;
    if (_showSplash) {
      Future.delayed(Duration(seconds: _splashDelaySeconds), () {
        if (mounted) setState(() { _showSplash = false; });
      });
    }
    // Navigation items
    _navItems = _parseNavItems(_navItemsB64);
    _loadInitial();
  }

  Future<void> _loadInitial() async {
    try {
      final initialUrl = _navItems.isNotEmpty ? _navItems[_currentIndex].url : _siteUrl;
      print('[WebView] Loading URL: $initialUrl');
            // ENHANCED WebView loading with multiple strategies
        try {
          await _controller.clearCache();
          await _controller.clearLocalStorage();
          print('[WebView] Cache cleared successfully');
          
          // Enhanced fallback URLs and strategies to resolve ERR_CACHE_MISS
          final List<String> urlsToTry = [
            initialUrl,
            'https://www.google.com/search?q=test', // Test URL with parameters
            'https://httpbin.org/user-agent', // Returns user agent info
            'https://example.com', // Simple static site
            'data:text/html,<html><head><meta charset="utf-8"><title>WebView Ready</title></head><body style="font-family:Arial;padding:20px;text-align:center;"><h1 style="color:green;">✅ WebView Loaded Successfully!</h1><p>The app is working correctly.</p><p><a href="$initialUrl" onclick="location.reload();return false;">Load Original Site</a></p></body></html>' // Enhanced inline HTML
          ];
        
        bool loadSuccess = false;
        for (int i = 0; i < urlsToTry.length && !loadSuccess; i++) {
          try {
            final testUrl = urlsToTry[i];
            print('[WebView] Trying URL [$i]: $testUrl');
            
            if (testUrl.startsWith('data:')) {
              // Load inline HTML directly
              await _controller.loadHtmlString(testUrl.substring(16)); // Remove 'data:text/html,'
              print('[WebView] Loaded inline HTML successfully');
            } else {
              // Enhanced loading strategy with multiple attempts
              final uri = Uri.parse(testUrl);
              bool urlLoaded = false;
              
              // Try 1: Direct load without cache busting first
              try {
                await _controller.loadRequest(uri);
                print('[WebView] Direct load succeeded for: $testUrl');
                urlLoaded = true;
              } catch (e) {
                print('[WebView] Direct load failed: $e, trying cache-busting');
                
                // Try 2: Cache-busting load
                try {
                  final timestamp = DateTime.now().millisecondsSinceEpoch;
                  final cacheBustUrl = uri.hasQuery 
                    ? '$testUrl&_cb=$timestamp&_retry=1'
                    : '$testUrl?_cb=$timestamp&_retry=1';
                  
                  final finalUri = Uri.parse(cacheBustUrl);
                  await _controller.loadRequest(finalUri, headers: {
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': '0',
                    'User-Agent': 'Mozilla/5.0 (Linux; Android 13; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Mobile Safari/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                    'Accept-Language': 'en-US,en;q=0.5',
                    'Accept-Encoding': 'gzip, deflate',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1',
                  });
                  print('[WebView] Cache-busting load succeeded for: $cacheBustUrl');
                  urlLoaded = true;
                } catch (e2) {
                  print('[WebView] Cache-busting load also failed: $e2');
                  
                  // Try 3: Simple load as last resort
                  try {
                    await _controller.loadRequest(Uri.parse(testUrl));
                    print('[WebView] Simple retry succeeded for: $testUrl');
                    urlLoaded = true;
                  } catch (e3) {
                    print('[WebView] All load attempts failed for: $testUrl - $e3');
                  }
                }
              }
              
              if (!urlLoaded) {
                throw Exception('Failed to load URL: $testUrl');
              }
            }
            
            print('[WebView] Successfully loaded: $testUrl');
            loadSuccess = true;
            
            // If we loaded a test URL, try to load the original after 2 seconds
            if (i > 0) {
              Future.delayed(const Duration(seconds: 2), () async {
                try {
                  final originalUri = Uri.parse(initialUrl);
                  await _controller.loadRequest(originalUri);
                  print('[WebView] Loaded original URL after test');
                } catch (e) {
                  print('[WebView] Could not load original URL: $e');
                }
              });
            }
            
          } catch (e) {
            print('[WebView] Failed to load URL [$i]: $e');
            continue;
          }
        }
        
        if (!loadSuccess) {
          throw Exception('All URL loading attempts failed');
        }
        
      } catch (e) {
        print('[WebView] All loading strategies failed: $e');
        // Load a simple HTML page as absolute fallback
        await _controller.loadHtmlString('''
          <html>
          <head><title>$_siteUrl</title></head>
          <body style="font-family: Arial; text-align: center; padding: 50px;">
            <h1>Welcome to App</h1>
            <p>WebView is working, but could not load the target website.</p>
            <p>Please check your internet connection and try again.</p>
            <button onclick="location.reload()">Retry</button>
          </body>
          </html>
        ''');
      }
    } catch (e) {
      print('[WebView] Critical load error: $e');
      setState(() { 
        _error = 'WebView initialization failed. Please restart the app.'; 
        _loading = false; 
      });
      Future.delayed(const Duration(seconds: 3), () {
        if (mounted && _error != null) {
          _retryLoad();
        }
      });
    }
  }

  Future<void> _retryLoad() async {
    print('[WebView] Retry attempt started');
    setState(() { _loading = true; _error = null; });
    
    try {
      // Force clear all WebView data
      await _controller.clearCache();
      await _controller.clearLocalStorage();
      
      // Reset retry flag for this attempt
      _didRetry = false;
      
      // Wait longer before retry to ensure network stability
      await Future.delayed(const Duration(seconds: 2));
      
      // Try loading again
      await _loadInitial();
    } catch (e) {
      print('[WebView] Retry failed: $e');
      setState(() {
        _loading = false;
        _error = 'Connection failed. Please check your internet and try again.';
      });
    }
  }

  Future<void> _postLoadChecks() async {
    if (_uaDesktopFallbackApplied) return;
    try {
      final res = await _controller.runJavaScriptReturningResult(
        "(() => { try { const t = document.body ? document.body.innerText : ''; return t.slice(0, 2000); } catch (e) { return ''; } })()",
      );
      final txt = (res ?? '').toString().toLowerCase();
      if (txt.contains("isn't compatible") || txt.contains("isn\\u2019t compatible") || txt.contains('not compatible')) {
        _uaDesktopFallbackApplied = true;
        try { _controller.setUserAgent(_defaultDesktopUA); } catch (_) {}
        try { await _controller.reload(); } catch (_) {}
      }
    } catch (_) {}
  }

  Future<void> _testUrl(String url) async {
    print('[WebView] Testing URL: $url');
    try {
      setState(() {
        _loading = true;
        _error = null;
      });
      
      await _controller.clearCache();
      await _controller.clearLocalStorage();
      
      if (url.startsWith('data:text/html')) {
        await _controller.loadHtmlString(url.substring(16));
      } else {
        await _controller.loadRequest(Uri.parse(url));
      }
      
      print('[WebView] Test URL loaded successfully: $url');
    } catch (e) {
      print('[WebView] Test URL failed: $url - Error: $e');
      setState(() {
        _error = 'Test failed: $e';
        _loading = false;
      });
    }
  }

  void _toggleDebugInfo() {
    setState(() {
      _showDebugInfo = !_showDebugInfo;
    });
  }

  Future<void> _loadTestUrl(String url) async {
    print('[WebView] Loading test URL: $url');
    setState(() {
      _loading = true;
      _error = null;
    });
    
    try {
      await _controller.clearCache();
      await _controller.clearLocalStorage();
      await _controller.loadRequest(Uri.parse(url));
    } catch (e) {
      print('[WebView] Test URL load failed: $e');
      setState(() {
        _error = 'Test URL failed: $e';
        _loading = false;
      });
    }
  }

  List<_NavItem> _parseNavItems(String b64) {
    if (b64.isEmpty) return [];
    try {
      final jsonStr = utf8.decode(base64.decode(b64));
      final data = json.decode(jsonStr);
      if (data is List) {
        return data.map((e) {
          final m = e is Map ? e : {};
          final title = (m['title'] ?? m['name'] ?? '').toString();
          final url = (m['url'] ?? m['link'] ?? '').toString();
          final iconName = (m['icon'] ?? '').toString();
          return _NavItem(title: title.isEmpty ? 'Item' : title, url: url.isEmpty ? _siteUrl : url, icon: _iconFromName(iconName));
        }).toList();
      }
    } catch (_) {}
    return [];
  }

  IconData _iconFromName(String name) {
    switch (name) {
      case 'home': return Icons.home;
      case 'shop': return Icons.storefront;
      case 'cart': return Icons.shopping_cart;
      case 'profile': return Icons.person;
      case 'search': return Icons.search;
      case 'star': return Icons.star;
      case 'settings': return Icons.settings;
      case 'favorite': return Icons.favorite;
      case 'news': return Icons.article;
      case 'category': return Icons.category;
      case 'plus': return Icons.add;
      default: return Icons.circle;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(_appName)),
      body: Stack(
        children: [
          WebViewWidget(controller: _controller),
          if (_loading) const LinearProgressIndicator(minHeight: 2),
          if (_showSplash) Positioned.fill(
            child: Container(
              decoration: (_splashMode == 'image' && _splashBgImageUrl.isNotEmpty)
                  ? BoxDecoration(image: DecorationImage(image: NetworkImage(_splashBgImageUrl), fit: BoxFit.cover))
                  : BoxDecoration(color: _parseHexColor(_splashBgColorHex.isNotEmpty ? _splashBgColorHex : _themeColorHex)),
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    if (_splashDisplayLogo == '1' && _splashLogoImageUrl.isNotEmpty)
                      Padding(
                        padding: const EdgeInsets.only(bottom: 12.0),
                        child: Image.network(_splashLogoImageUrl, width: 128, height: 128, errorBuilder: (_, __, ___) => const SizedBox.shrink()),
                      ),
                    if (_splashTagline.isNotEmpty)
                      Text(
                        _splashTagline,
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: _splashTextTheme == 'dark' ? Colors.black : Colors.white,
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                  ],
                ),
              ),
            ),
          ),
          if (_error != null) Positioned.fill(
            child: _loading
              ? Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const CircularProgressIndicator(),
                      const SizedBox(height: 16),
                      const Text('Loading...', style: TextStyle(fontSize: 16)),
                      const SizedBox(height: 8),
                      Text(_siteUrl, style: const TextStyle(fontSize: 12, color: Colors.grey)),
                    ],
                  ),
                )
              : _error != null
                ? Center(
                    child: Padding(
                      padding: const EdgeInsets.all(20.0),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          const Icon(Icons.error_outline, size: 48, color: Colors.red),
                          const SizedBox(height: 12),
                          Text(_error!, textAlign: TextAlign.center, style: const TextStyle(fontSize: 16)),
                          const SizedBox(height: 8),
                          Text('URL: $_siteUrl', textAlign: TextAlign.center, style: const TextStyle(fontSize: 12, color: Colors.grey)),
                          const SizedBox(height: 12),
                          ElevatedButton(onPressed: _loadInitial, child: const Text('Reload')),
                          const SizedBox(height: 8),
                          ElevatedButton(
                            onPressed: () => _loadTestUrl('https://www.google.com'),
                            child: const Text('Test Google'),
                          ),
                        ],
                      ),
                    ),
                  )
                : Container(
                    color: Colors.white,
                    child: Stack(
                      children: [
                        WebViewWidget(controller: _controller),
                        // Debug overlay
                        if (_showDebugInfo)
                          Positioned(
                            top: 40,
                            right: 10,
                            child: Container(
                              padding: const EdgeInsets.all(8),
                              decoration: BoxDecoration(
                                color: Colors.black87,
                                borderRadius: BorderRadius.circular(4),
                              ),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text('URL: $_currentUrl', style: const TextStyle(color: Colors.white, fontSize: 10)),
                                  Text('Loading: $_loading', style: const TextStyle(color: Colors.white, fontSize: 10)),
                                  Text('Error: ${_error ?? 'None'}', style: const TextStyle(color: Colors.white, fontSize: 10)),
                                ],
                              ),
                            ),
                          ),
                        // Debug toggle button
                        Positioned(
                          top: 40,
                          left: 10,
                          child: FloatingActionButton.small(
                            onPressed: () => setState(() => _showDebugInfo = !_showDebugInfo),
                            child: const Icon(Icons.bug_report, size: 16),
                          ),
                        ),
                      ],
                    ),
                  ),
          ),
        ),
        bottomNavigationBar: (_navType == 'bottom-tabs' && _navItems.isNotEmpty)
          ? BottomNavigationBar(
              currentIndex: _currentIndex,
              selectedItemColor: _parseHexColor(_themeColorHex),
              onTap: (i) {
                setState(() { _currentIndex = i; });
                final url = _navItems[i].url;
                try {
                  final base = Uri.parse(url);
                  final uri = base.replace(queryParameters: {
                    ...base.queryParameters,
                    '_ts': DateTime.now().millisecondsSinceEpoch.toString(),
                  });
                  _controller.loadRequest(uri);
                } catch (_) {}
              },
              items: [
                for (final it in _navItems)
                  BottomNavigationBarItem(icon: Icon(it.icon), label: it.title),
              ],
            )
          : null,
    );
  }
}

class _NavItem {
  final String title;
  final String url;
  final IconData icon;
  _NavItem({required this.title, required this.url, required this.icon});
}
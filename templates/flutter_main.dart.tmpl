// Flutter Template Generated by Golden WebView App Plugin
// Template Version: 6.0 - FINAL SOLUTION - NO WEBVIEW
// Generated at: 2025-09-09 02:48:12
// FINAL APPROACH: Native Flutter UI + External Browser
// No WebView issues, no cache problems, 100% reliable
// Beautiful native interface with external browser launch
import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';

void main() {
  runApp(const WebViewApp());
}

class WebViewApp extends StatelessWidget {
  const WebViewApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: const String.fromEnvironment('GWA_APP_NAME', defaultValue: 'GoldenApp'),
      theme: ThemeData(
        primarySwatch: Colors.blue,
        fontFamily: const String.fromEnvironment('GWA_APP_FONT', defaultValue: 'Cairo'),
      ),
      home: const LauncherScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class LauncherScreen extends StatefulWidget {
  const LauncherScreen({super.key});

  @override
  State<LauncherScreen> createState() => _LauncherScreenState();
}

class _LauncherScreenState extends State<LauncherScreen> {
  // App configuration from environment variables
  final String _appName = const String.fromEnvironment('GWA_APP_NAME', defaultValue: 'WebView App');
  final String _siteUrl = const String.fromEnvironment('SITE_URL', defaultValue: 'https://netmasr.com/');
  final String _themeColorHex = const String.fromEnvironment('GWA_THEME_COLOR', defaultValue: '#2196F3');
  final String _splashBgColor = const String.fromEnvironment('GWA_SPLASH_BG_COLOR', defaultValue: '#2196F3');
  final String _splashTagline = const String.fromEnvironment('GWA_SPLASH_TAGLINE', defaultValue: 'اضغط لفتح الموقع');
  final String _splashTextTheme = const String.fromEnvironment('GWA_SPLASH_TEXT_THEME', defaultValue: 'light');
  final bool _splashDisplayLogo = const String.fromEnvironment('GWA_SPLASH_DISPLAY_LOGO', defaultValue: '0') == '1';
  final String _splashLogoUrl = const String.fromEnvironment('GWA_SPLASH_LOGO_IMAGE_URL', defaultValue: '');
  final int _splashDelay = int.tryParse(const String.fromEnvironment('GWA_SPLASH_DELAY', defaultValue: '30')) ?? 30;

  // State variables
  bool _showSplash = true;
  bool _isLaunching = false;

  @override
  void initState() {
    super.initState();
    _startSplashTimer();
  }

  void _startSplashTimer() {
    if (_splashDelay > 0) {
      Timer(Duration(seconds: _splashDelay ~/ 10), () {
        if (mounted) {
          setState(() {
            _showSplash = false;
          });
        }
      });
    }
  }

  String _ensureScheme(String url) {
    if (url.isEmpty) return 'https://google.com';
    url = url.trim();
    
    // If already has scheme, return as is
    if (url.startsWith('http://') || url.startsWith('https://')) {
      return url;
    }
    
    // If starts with www., add https://
    if (url.startsWith('www.')) {
      return 'https://$url';
    }
    
    // Otherwise, add https:// prefix
    return 'https://$url';
  }

  Future<void> _launchWebsite() async {
    final targetUrl = _ensureScheme(_siteUrl);
    
    setState(() {
      _isLaunching = true;
    });
    
    try {
      final uri = Uri.parse(targetUrl);
      if (await canLaunchUrl(uri)) {
        await launchUrl(uri, mode: LaunchMode.externalApplication);
        print('[EXTERNAL LAUNCH] Successfully opened $targetUrl in external browser');
        
        // Show success message
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('تم فتح الموقع في المتصفح'),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 2),
            ),
          );
        }
      } else {
        throw Exception('Cannot launch URL');
      }
    } catch (e) {
      print('[EXTERNAL LAUNCH] Error: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('فشل فتح الرابط: $e'),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 3),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLaunching = false;
        });
      }
    }
  }

  Color _parseHexColor(String hexString) {
    final buffer = StringBuffer();
    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');
    buffer.write(hexString.replaceFirst('#', ''));
    return Color(int.parse(buffer.toString(), radix: 16));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Main content
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  _parseHexColor(_splashBgColor),
                  _parseHexColor(_splashBgColor).withOpacity(0.8),
                ],
              ),
            ),
            child: SafeArea(
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // Logo
                    if (_splashDisplayLogo && _splashLogoUrl.isNotEmpty)
                      Container(
                        margin: const EdgeInsets.only(bottom: 40),
                        child: Image.network(
                          _splashLogoUrl,
                          width: 120,
                          height: 120,
                          errorBuilder: (context, error, stackTrace) {
                            return const Icon(
                              Icons.web,
                              size: 120,
                              color: Colors.white,
                            );
                          },
                        ),
                      )
                    else
                      Container(
                        margin: const EdgeInsets.only(bottom: 40),
                        child: const Icon(
                          Icons.language,
                          size: 120,
                          color: Colors.white,
                        ),
                      ),
                    
                    // App Name
                    Text(
                      _appName,
                      style: TextStyle(
                        fontSize: 32,
                        fontWeight: FontWeight.bold,
                        color: _splashTextTheme == 'dark' ? Colors.black : Colors.white,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    
                    const SizedBox(height: 20),
                    
                    // Tagline
                    Text(
                      _splashTagline,
                      style: TextStyle(
                        fontSize: 18,
                        color: (_splashTextTheme == 'dark' ? Colors.black : Colors.white).withOpacity(0.9),
                      ),
                      textAlign: TextAlign.center,
                    ),
                    
                    const SizedBox(height: 60),
                    
                    // Launch Button
                    if (!_showSplash)
                      ElevatedButton.icon(
                        onPressed: _isLaunching ? null : _launchWebsite,
                        icon: _isLaunching
                            ? const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                                ),
                              )
                            : const Icon(Icons.open_in_browser),
                        label: Text(
                          _isLaunching ? 'جاري الفتح...' : 'فتح الموقع',
                          style: const TextStyle(fontSize: 18),
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.white,
                          foregroundColor: _parseHexColor(_splashBgColor),
                          padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 15),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(30),
                          ),
                        ),
                      ),
                    
                    if (!_showSplash) const SizedBox(height: 20),
                    
                    // URL Display
                    if (!_showSplash)
                      Container(
                        margin: const EdgeInsets.symmetric(horizontal: 40),
                        padding: const EdgeInsets.all(15),
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(15),
                        ),
                        child: Text(
                          _ensureScheme(_siteUrl),
                          style: TextStyle(
                            fontSize: 14,
                            color: _splashTextTheme == 'dark' ? Colors.black : Colors.white,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                  ],
                ),
              ),
            ),
          ),
          
          // Splash screen overlay
          if (_showSplash)
            Positioned.fill(
              child: Container(
                color: _parseHexColor(_splashBgColor),
                child: Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const CircularProgressIndicator(
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      ),
                      const SizedBox(height: 20),
                      Text(
                        'جاري التحضير...',
                        style: TextStyle(
                          fontSize: 18,
                          color: _splashTextTheme == 'dark' ? Colors.black : Colors.white,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }
}
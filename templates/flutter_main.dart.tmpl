import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: '__APP_NAME__',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const WebViewScreen(),
    );
  }
}

class WebViewScreen extends StatefulWidget {
  const WebViewScreen({super.key});

  @override
  State<WebViewScreen> createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> {
  late final WebViewController _controller;
  bool _loading = true;
  String? _error;

  final String _siteUrl = '__SITE_URL__';
  final String _userAgent = '__USER_AGENT__';

  @override
  void initState() {
    super.initState();
    final ctrl = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setNavigationDelegate(NavigationDelegate(
        onPageStarted: (url) => setState(() { _loading = true; _error = null; }),
        onPageFinished: (url) => setState(() { _loading = false; }),
        onWebResourceError: (err) => setState(() {
          _loading = false;
          _error = 'Error ${err.errorCode}: ' + (err.description ?? 'Unknown error');
        }),
      ));
    try {
      if (_userAgent.isNotEmpty) {
        ctrl.setUserAgent(_userAgent);
      }
    } catch (_) {}
    _controller = ctrl;
    _loadInitial();
  }

  Future<void> _loadInitial() async {
    try { await _controller.clearCache(); } catch (_) {}
    try {
      final base = Uri.parse(_siteUrl);
      final uri = base.replace(
        queryParameters: {
          ...base.queryParameters,
          '_ts': DateTime.now().millisecondsSinceEpoch.toString(),
        },
      );
      await _controller.loadRequest(
        WebViewRequest(
          uri: uri,
          method: WebViewRequestMethod.get,
          headers: const {
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0',
          },
        ),
      );
    } catch (e) {
      setState(() { _error = e.toString(); _loading = false; });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('__APP_NAME__')),
      body: Stack(
        children: [
          WebViewWidget(controller: _controller),
          if (_loading) const LinearProgressIndicator(minHeight: 2),
          if (_error != null) Positioned.fill(
            child: Container(
              color: Colors.white,
              padding: const EdgeInsets.all(16),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Icon(Icons.wifi_off, size: 48),
                  const SizedBox(height: 12),
                  Text(_error!, textAlign: TextAlign.center),
                  const SizedBox(height: 12),
                  ElevatedButton(onPressed: _loadInitial, child: const Text('Reload')),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
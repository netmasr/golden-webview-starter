import 'dart:async';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:webview_flutter_android/webview_flutter_android.dart';
import 'package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:webview_flutter_android/webview_flutter_android.dart';
import 'package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart';
import 'dart:io';
import 'dart:convert';

// Config from --dart-define with safe defaults
const String _appName = String.fromEnvironment('GWA_APP_NAME', defaultValue: 'GoldenApp');
const String _themeColorHex = String.fromEnvironment('GWA_THEME_COLOR', defaultValue: '#2196f3');
const String _orientation = String.fromEnvironment('GWA_PLATFORM_ORIENTATION', defaultValue: 'system');
const String _envSiteUrl = String.fromEnvironment('GWA_SITE_URL', defaultValue: 'https://example.com/');
const String _userAgent = String.fromEnvironment('GWA_USER_AGENT', defaultValue: '');
const String _defaultMobileUA = 'Mozilla/5.0 (Linux; Android 15; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36';
const String _defaultDesktopUA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36';
// Splash
const String _splashMode = String.fromEnvironment('GWA_SPLASH_BG_MODE', defaultValue: 'color');
const String _splashBgColorHex = String.fromEnvironment('GWA_SPLASH_BG_COLOR', defaultValue: '');
const String _splashTagline = String.fromEnvironment('GWA_SPLASH_TAGLINE', defaultValue: '');
const String _splashTextTheme = String.fromEnvironment('GWA_SPLASH_TEXT_THEME', defaultValue: 'light');
const String _splashDelay = String.fromEnvironment('GWA_SPLASH_DELAY', defaultValue: '3');
const String _splashDisplayLogo = String.fromEnvironment('GWA_SPLASH_DISPLAY_LOGO', defaultValue: '0');
const String _splashBgImageUrl = String.fromEnvironment('GWA_SPLASH_BACKGROUND_IMAGE_URL', defaultValue: '');
const String _splashLogoImageUrl = String.fromEnvironment('GWA_SPLASH_LOGO_IMAGE_URL', defaultValue: '');
// Navigation
const String _navType = String.fromEnvironment('GWA_NAV_TYPE', defaultValue: 'classic');
const String _navItemsB64 = String.fromEnvironment('GWA_NAV_ITEMS_B64', defaultValue: '');

Color _parseHexColor(String hex) {
  var h = hex.replaceAll('#', '').toUpperCase();
  if (h.length == 6) h = 'FF' + h; // add alpha if missing
  return Color(int.parse(h, radix: 16));
}

String _normalizedSiteUrl(String u) {
  var s = u.trim();
  if (s.isEmpty) return 'https://example.com/';
  if (!(s.startsWith('http://') || s.startsWith('https://'))) {
    s = 'https://' + s;
  }
  return s;
}

Future<void> _applyOrientation() async {
  switch (_orientation) {
    case 'portrait':
      await SystemChrome.setPreferredOrientations([
        DeviceOrientation.portraitUp,
        DeviceOrientation.portraitDown,
      ]);
      break;
    case 'landscape':
      await SystemChrome.setPreferredOrientations([
        DeviceOrientation.landscapeLeft,
        DeviceOrientation.landscapeRight,
      ]);
      break;
    default:
      await SystemChrome.setPreferredOrientations(DeviceOrientation.values);
  }
}

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await _applyOrientation();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    final seed = _parseHexColor(_themeColorHex);
    return MaterialApp(
      title: _appName,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: seed),
        useMaterial3: true,
      ),
      home: const WebViewScreen(),
    );
  }
}

class WebViewScreen extends StatefulWidget {
  const WebViewScreen({super.key});

  @override
  State<WebViewScreen> createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> with WidgetsBindingObserver {
  late final WebViewController _controller;
  String? _error;
  bool _loading = true;
  int _splashDelaySeconds = 0;
  bool _showSplash = false;
  bool _showDebugInfo = false;
  String _currentUrl = '';
  List<_NavItem> _navItems = <_NavItem>[];
  int _currentIndex = 0;
  bool _didRetry = false;
  bool _uaDesktopFallbackApplied = false;
  bool _isConnected = true;
  int _loadProgress = 0;
  Timer? _timeoutTimer;

  final String _siteUrl = _normalizedSiteUrl(_envSiteUrl);

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _initializeApp();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _timeoutTimer?.cancel();
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (state == AppLifecycleState.resumed && _error != null) {
      _retryLoad();
    }
  }

  Future<void> _initializeApp() async {
    // Check connectivity first
    await _checkConnectivity();
    
    // Initialize WebView
    _initializeWebView();
    
    // Initialize navigation and splash
    _splashDelaySeconds = int.tryParse(_splashDelay) ?? 0;
    _showSplash = _splashDelaySeconds > 0;
    if (_showSplash) {
      Future.delayed(Duration(seconds: _splashDelaySeconds), () {
        if (mounted) setState(() { _showSplash = false; });
      });
    }
    _navItems = _parseNavItems(_navItemsB64);
    
    // Start loading with timeout
    _loadWithTimeout();
  }

  Future<void> _checkConnectivity() async {
    try {
      final connectivityResult = await Connectivity().checkConnectivity();
      setState(() {
        _isConnected = connectivityResult != ConnectivityResult.none;
      });
      
      // Listen for connectivity changes
      Connectivity().onConnectivityChanged.listen((ConnectivityResult result) {
        final wasConnected = _isConnected;
        setState(() {
          _isConnected = result != ConnectivityResult.none;
        });
        
        // Retry loading if connection restored
        if (!wasConnected && _isConnected && _error != null) {
          Future.delayed(const Duration(seconds: 2), _retryLoad);
        }
      });
    } catch (e) {
      print('[Connectivity] Check failed: $e');
      setState(() {
        _isConnected = false;
      });
    }
  }

  void _initializeWebView() {
    late final PlatformWebViewControllerCreationParams params;
    
    if (WebViewPlatform.instance is WebKitWebViewPlatform) {
      params = WebKitWebViewControllerCreationParams(
        allowsInlineMediaPlaybook: true,
        mediaTypesRequiringUserAction: const <PlaybackMediaTypes>{},
      );
    } else {
      params = const PlatformWebViewControllerCreationParams();
    }

    _controller = WebViewController.fromPlatformCreationParams(params);
    _controller.setJavaScriptMode(JavaScriptMode.unrestricted);
    _controller.setBackgroundColor(Colors.white);
    _controller.setUserAgent('Mozilla/5.0 (Linux; Android 12; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Mobile Safari/537.36 GoldenWebViewApp/1.0');
    
    _controller.setNavigationDelegate(
      NavigationDelegate(
        onProgress: (int progress) {
          setState(() {
            _loadProgress = progress;
          });
          print('[WebView] Loading progress: $progress%');
        },
        onPageStarted: (String url) {
          _timeoutTimer?.cancel();
          setState(() {
            _loading = true;
            _error = null;
            _currentUrl = url;
            _loadProgress = 0;
          });
          print('[WebView] Page started loading: $url');
          
          // Start timeout timer
          _timeoutTimer = Timer(const Duration(seconds: 30), () {
            if (_loading && mounted) {
              setState(() {
                _error = 'انتهت مهلة التحميل - الصفحة تستغرق وقتاً طويلاً';
                _loading = false;
              });
            }
          });
        },
        onPageFinished: (String url) {
          _timeoutTimer?.cancel();
          setState(() {
            _loading = false;
            _currentUrl = url;
            _loadProgress = 100;
          });
          print('[WebView] Page finished loading: $url');
          _verifyPageContent();
        },
        onNavigationRequest: (NavigationRequest request) {
          print('[WebView] Navigation request: ${request.url}');
          return NavigationDecision.navigate;
        },
        onWebResourceError: (WebResourceError error) {
          _timeoutTimer?.cancel();
          print('[WebView] WebView error: ${error.description} (Code: ${error.errorCode})');
          setState(() {
            _loading = false;
            _error = _getErrorMessage(error);
          });
        },
        onUrlChange: (UrlChange change) {
          print('[WebView] URL changed to: ${change.url}');
        },
      ),
    );

    // Configure platform-specific settings
    if (_controller.platform is AndroidWebViewController) {
      AndroidWebViewController.enableDebugging(true);
      (_controller.platform as AndroidWebViewController)
        ..setMediaPlaybackRequiresUserGesture(false)
        ..setTextZoom(100);
    }
  }

  Future<void> _loadInitial() async {
    setState(() {
      _loading = true;
      _error = null;
    });
    
    try {
      final initialUrl = _navItems.isNotEmpty ? _navItems[_currentIndex].url : _siteUrl;
      print('[WebView] Loading URL: $initialUrl');
      
      // Clear cache first
      try {
        await _controller.clearCache();
        await _controller.clearLocalStorage();
        print('[WebView] Cache cleared successfully');
      } catch (e) {
        print('[WebView] Cache clear failed: $e');
      }
      
      // Try to load the URL directly first
      try {
        final uri = Uri.parse(initialUrl);
        await _controller.loadRequest(uri);
        print('[WebView] Direct load initiated for: $initialUrl');
        return;
      } catch (e) {
        print('[WebView] Direct load failed: $e');
        setState(() {
          _error = 'فشل في تحميل الموقع: $e';
        });
      }
      
      // Fallback to simple HTML content with working links
      final fallbackHtml = '''
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>$_appName</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            line-height: 1.6;
        }
        
        .container {
            background: rgba(255,255,255,0.1);
            padding: 40px 30px;
            border-radius: 20px;
            backdrop-filter: blur(15px);
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            max-width: 400px;
            width: 100%;
            text-align: center;
            border: 1px solid rgba(255,255,255,0.2);
        }
        
        .logo {
            font-size: 48px;
            margin-bottom: 20px;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            font-weight: 600;
        }
        
        .status {
            margin: 20px 0;
            padding: 15px;
            background: rgba(76, 175, 80, 0.3);
            border-radius: 12px;
            border: 2px solid rgba(76, 175, 80, 0.5);
            font-size: 16px;
        }
        
        .btn {
            display: inline-block;
            padding: 15px 25px;
            margin: 8px 5px;
            background: rgba(255,255,255,0.2);
            color: white;
            text-decoration: none;
            border-radius: 25px;
            border: 2px solid rgba(255,255,255,0.3);
            transition: all 0.3s ease;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            min-width: 120px;
        }
        
        .btn:hover, .btn:active {
            background: rgba(255,255,255,0.3);
            border-color: rgba(255,255,255,0.5);
            transform: translateY(-2px);
        }
        
        .btn-primary {
            background: rgba(33, 150, 243, 0.8);
            border-color: rgba(33, 150, 243, 1);
        }
        
        .btn-primary:hover {
            background: rgba(33, 150, 243, 1);
        }
        
        .emoji {
            font-size: 20px;
            margin-right: 8px;
        }
        
        .links-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin: 20px 0;
        }
        
        @media (max-width: 480px) {
            .links-grid {
                grid-template-columns: 1fr;
            }
            .container {
                padding: 30px 20px;
            }
        }
        
        .footer {
            margin-top: 30px;
            font-size: 14px;
            opacity: 0.8;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">🌐</div>
        <h1>$_appName</h1>
        
        <div class="status">
            WebView جاهز للعمل!<br>التطبيق يعمل بشكل صحيح
        </div>
        
        <div style="margin: 25px 0;">
            <a href="$initialUrl" class="btn btn-primary">
                <span class="emoji">🏠</span>الموقع الرئيسي
            </a>
        </div>
        
        <div class="links-grid">
            <a href="https://www.google.com" class="btn">
                <span class="emoji">🔍</span>Google
            </a>
            <a href="https://www.youtube.com" class="btn">
                <span class="emoji">🎥</span>YouTube
            </a>
            <a href="https://www.facebook.com" class="btn">
                <span class="emoji">📘</span>Facebook
            </a>
            <a href="https://www.twitter.com" class="btn">
                <span class="emoji">🐦</span>Twitter
            </a>
        </div>
        
        <div class="footer">
            إصدار 1.0 - يعمل بتقنية Flutter WebView
        </div>
    </div>
    
    <script>
        console.log('GoldenWebView loaded successfully');
        console.log('Primary URL: $initialUrl');
        console.log('User Agent:', navigator.userAgent);
        
        // Handle link clicks
        document.querySelectorAll('.btn').forEach(btn => {
            btn.addEventListener('click', function(e) {
                console.log('Navigating to:', this.href);
                // Add visual feedback
                this.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    this.style.transform = '';
                }, 150);
            });
        });
        
        // Test connectivity
        fetch('https://www.google.com/favicon.ico', { mode: 'no-cors' })
            .then(() => console.log('Internet connection: OK'))
            .catch(() => console.log('Internet connection: OFFLINE'));
    </script>
</body>
</html>
''';
      
      try {
        await _controller.loadHtmlString(fallbackHtml);
        print('[WebView] Fallback HTML loaded successfully');
      } catch (e) {
        print('[WebView] Fallback HTML failed: $e');
        setState(() {
          _error = 'فشل في تحميل المحتوى: $e';
        });
      }
    } catch (e) {
      print('[WebView] Load initial failed: $e');
      setState(() {
        _loading = false;
        _error = 'خطأ في التحميل: $e';
      });
    } finally {
      setState(() {
        _loading = false;
      });
    }
  }

  Future<void> _retryLoad() async {
    print('[WebView] Retry attempt started');
    setState(() { _loading = true; _error = null; });
    
    try {
      // Force clear all WebView data
      await _controller.clearCache();
      await _controller.clearLocalStorage();
      
      // Reset retry flag for this attempt
      _didRetry = false;
      
      // Wait longer before retry to ensure network stability
      await Future.delayed(const Duration(seconds: 2));
      
      // Try loading again
      await _loadInitial();
    } catch (e) {
      print('[WebView] Retry failed: $e');
      setState(() {
        _loading = false;
        _error = 'Connection failed. Please check your internet and try again.';
      });
    }
  }

  Future<void> _loadWithTimeout() async {
    if (!_isConnected) {
      setState(() {
        _error = 'لا يوجد اتصال بالإنترنت';
        _loading = false;
      });
      return;
    }
    await _loadInitial();
  }

  Future<void> _verifyPageContent() async {
    try {
      await Future.delayed(const Duration(seconds: 2));
      final result = await _controller.runJavaScriptReturningResult(
        "(() => { try { const t = document.body ? document.body.innerText : ''; return JSON.stringify({textLength: t.length, hasContent: t.length > 10}); } catch (e) { return JSON.stringify({error: e.toString()}); } })()",
      );
      
      if (result.toString().contains('"textLength":0') || 
          result.toString().contains('error')) {
        setState(() {
          _error = 'الصفحة فارغة أو لم يتم تحميلها بشكل صحيح';
        });
      }
    } catch (e) {
      print('[WebView] Content verification failed: $e');
    }
  }

  String _getErrorMessage(WebResourceError error) {
    switch (error.errorCode) {
      case -2:
        return 'خطأ في الشبكة: تحقق من اتصال الإنترنت';
      case -6:
        return 'رفض الاتصال: الخادم غير متاح';
      case -8:
        return 'انتهت مهلة الاتصال';
      case -10:
        return 'عنوان URL غير صالح';
      case -11:
        return 'نوع الملف غير مدعوم';
      default:
        return 'خطأ ${error.errorCode}: ${error.description}';
    }
  }

  Future<void> _postLoadChecks() async {
    if (_uaDesktopFallbackApplied) return;
    try {
      final res = await _controller.runJavaScriptReturningResult(
        "(() => { try { const t = document.body ? document.body.innerText : ''; return t.slice(0, 2000); } catch (e) { return ''; } })()",
      );
      final txt = (res ?? '').toString().toLowerCase();
      if (txt.contains("isn't compatible") || txt.contains("isn\\u2019t compatible") || txt.contains('not compatible')) {
        _uaDesktopFallbackApplied = true;
        try { _controller.setUserAgent(_defaultDesktopUA); } catch (_) {}
        try { await _controller.reload(); } catch (_) {}
      }
    } catch (_) {}
  }

  Future<void> _testUrl(String url) async {
    print('[WebView] Testing URL: $url');
    try {
      setState(() {
        _loading = true;
        _error = null;
      });
      
      await _controller.clearCache();
      await _controller.clearLocalStorage();
      
      if (url.startsWith('data:text/html')) {
        await _controller.loadHtmlString(url.substring(16));
      } else {
        await _controller.loadRequest(Uri.parse(url));
      }
      
      print('[WebView] Test URL loaded successfully: $url');
    } catch (e) {
      print('[WebView] Test URL failed: $url - Error: $e');
      setState(() {
        _error = 'Test failed: $e';
        _loading = false;
      });
    }
  }

  void _toggleDebugInfo() {
    setState(() {
      _showDebugInfo = !_showDebugInfo;
    });
  }

  Future<void> _loadTestUrl(String url) async {
    print('[WebView] Loading test URL: $url');
    setState(() {
      _loading = true;
      _error = null;
    });
    
    try {
      await _controller.clearCache();
      await _controller.clearLocalStorage();
      await _controller.loadRequest(Uri.parse(url));
    } catch (e) {
      print('[WebView] Test URL load failed: $e');
      setState(() {
        _error = 'Test URL failed: $e';
        _loading = false;
      });
    }
  }

  List<_NavItem> _parseNavItems(String b64) {
    if (b64.isEmpty) return [];
    try {
      final jsonStr = utf8.decode(base64.decode(b64));
      final data = json.decode(jsonStr);
      if (data is List) {
        return data.map((e) {
          final m = e is Map ? e : {};
          final title = (m['title'] ?? m['name'] ?? '').toString();
          final url = (m['url'] ?? m['link'] ?? '').toString();
          final iconName = (m['icon'] ?? '').toString();
          return _NavItem(title: title.isEmpty ? 'Item' : title, url: url.isEmpty ? _siteUrl : url, icon: _iconFromName(iconName));
        }).toList();
      }
    } catch (_) {}
    return [];
  }

  IconData _iconFromName(String name) {
    switch (name) {
      case 'home': return Icons.home;
      case 'shop': return Icons.storefront;
      case 'cart': return Icons.shopping_cart;
      case 'profile': return Icons.person;
      case 'search': return Icons.search;
      case 'star': return Icons.star;
      case 'settings': return Icons.settings;
      case 'favorite': return Icons.favorite;
      case 'news': return Icons.article;
      case 'category': return Icons.category;
      case 'plus': return Icons.add;
      default: return Icons.circle;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(_appName)),
      body: Stack(
        children: [
          // Main WebView - always visible
          Container(
            color: Colors.white,
            child: WebViewWidget(controller: _controller),
          ),
          
          // Loading indicator
          if (_loading) 
            const Positioned(
              top: 0,
              left: 0,
              right: 0,
              child: LinearProgressIndicator(minHeight: 3),
            ),
          
          // Splash screen overlay
          if (_showSplash) 
            Positioned.fill(
              child: Container(
                decoration: (_splashMode == 'image' && _splashBgImageUrl.isNotEmpty)
                    ? BoxDecoration(image: DecorationImage(image: NetworkImage(_splashBgImageUrl), fit: BoxFit.cover))
                    : BoxDecoration(color: _parseHexColor(_splashBgColorHex.isNotEmpty ? _splashBgColorHex : _themeColorHex)),
                child: Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      if (_splashDisplayLogo == '1' && _splashLogoImageUrl.isNotEmpty)
                        Padding(
                          padding: const EdgeInsets.only(bottom: 12.0),
                          child: Image.network(_splashLogoImageUrl, width: 128, height: 128, errorBuilder: (_, __, ___) => const SizedBox.shrink()),
                        ),
                      if (_splashTagline.isNotEmpty)
                        Text(
                          _splashTagline,
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            color: _splashTextTheme == 'dark' ? Colors.black : Colors.white,
                            fontSize: 18,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                    ],
                  ),
                ),
              ),
            ),
          
          // Error overlay (only shows when there's an error)
          if (_error != null && !_loading) 
            Positioned.fill(
              child: Container(
                color: Colors.white,
                child: Center(
                  child: Padding(
                    padding: const EdgeInsets.all(20.0),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(Icons.error_outline, size: 48, color: Colors.red),
                        const SizedBox(height: 12),
                        Text(_error!, textAlign: TextAlign.center, style: const TextStyle(fontSize: 16)),
                        const SizedBox(height: 8),
                        Text('URL: $_siteUrl', textAlign: TextAlign.center, style: const TextStyle(fontSize: 12, color: Colors.grey)),
                        const SizedBox(height: 12),
                        ElevatedButton(onPressed: _loadInitial, child: const Text('إعادة التحميل')),
                        const SizedBox(height: 8),
                        ElevatedButton(
                          onPressed: () => _loadTestUrl('https://www.google.com'),
                          child: const Text('اختبار Google'),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          
          // Debug overlay
          if (_showDebugInfo)
            Positioned(
              top: 40,
              right: 10,
              child: Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.black87,
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('URL: $_currentUrl', style: const TextStyle(color: Colors.white, fontSize: 10)),
                    Text('Loading: $_loading', style: const TextStyle(color: Colors.white, fontSize: 10)),
                    Text('Error: ${_error ?? 'None'}', style: const TextStyle(color: Colors.white, fontSize: 10)),
                  ],
                ),
              ),
            ),
          
          // Debug toggle button
          Positioned(
            top: 40,
            left: 10,
            child: FloatingActionButton.small(
              onPressed: () => setState(() => _showDebugInfo = !_showDebugInfo),
              child: const Icon(Icons.bug_report, size: 16),
            ),
          ),
        ],
      ),
      bottomNavigationBar: (_navType == 'bottom-tabs' && _navItems.isNotEmpty)
          ? BottomNavigationBar(
              currentIndex: _currentIndex,
              selectedItemColor: _parseHexColor(_themeColorHex),
              onTap: (i) {
                setState(() { _currentIndex = i; });
                final url = _navItems[i].url;
                try {
                  final base = Uri.parse(url);
                  final uri = base.replace(queryParameters: {
                    ...base.queryParameters,
                    '_ts': DateTime.now().millisecondsSinceEpoch.toString(),
                  });
                  _controller.loadRequest(uri);
                } catch (_) {}
              },
              items: [
                for (final it in _navItems)
                  BottomNavigationBarItem(icon: Icon(it.icon), label: it.title),
              ],
            )
          : null,
    );
  }
}

class _NavItem {
  final String title;
  final String url;
  final IconData icon;
  _NavItem({required this.title, required this.url, required this.icon});
}
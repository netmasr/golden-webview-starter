import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:webview_flutter_android/webview_flutter_android.dart';
import 'package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart';
import 'dart:io';
import 'dart:convert';

// Config from --dart-define with safe defaults
const String _appName = String.fromEnvironment('GWA_APP_NAME', defaultValue: 'netmasr');
const String _themeColorHex = String.fromEnvironment('GWA_THEME_COLOR', defaultValue: '#2196f3');
const String _orientation = String.fromEnvironment('GWA_PLATFORM_ORIENTATION', defaultValue: 'system');
const String _envSiteUrl = String.fromEnvironment('GWA_SITE_URL', defaultValue: 'https://example.com/');
const String _userAgent = String.fromEnvironment('GWA_USER_AGENT', defaultValue: '');
const String _defaultMobileUA = 'Mozilla/5.0 (Linux; Android 15; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36';
const String _defaultDesktopUA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36';
// Splash
const String _splashMode = String.fromEnvironment('GWA_SPLASH_BG_MODE', defaultValue: 'color');
const String _splashBgColorHex = String.fromEnvironment('GWA_SPLASH_BG_COLOR', defaultValue: '');
const String _splashTagline = String.fromEnvironment('GWA_SPLASH_TAGLINE', defaultValue: '');
const String _splashTextTheme = String.fromEnvironment('GWA_SPLASH_TEXT_THEME', defaultValue: 'light');
const String _splashDelay = String.fromEnvironment('GWA_SPLASH_DELAY', defaultValue: '3');
const String _splashDisplayLogo = String.fromEnvironment('GWA_SPLASH_DISPLAY_LOGO', defaultValue: '0');
const String _splashBgImageUrl = String.fromEnvironment('GWA_SPLASH_BACKGROUND_IMAGE_URL', defaultValue: '');
const String _splashLogoImageUrl = String.fromEnvironment('GWA_SPLASH_LOGO_IMAGE_URL', defaultValue: '');
// Navigation
const String _navType = String.fromEnvironment('GWA_NAV_TYPE', defaultValue: 'classic');
const String _navItemsB64 = String.fromEnvironment('GWA_NAV_ITEMS_B64', defaultValue: '');

Color _parseHexColor(String hex) {
  var h = hex.replaceAll('#', '').toUpperCase();
  if (h.length == 6) h = 'FF' + h; // add alpha if missing
  return Color(int.parse(h, radix: 16));
}

String _normalizedSiteUrl(String u) {
  var s = u.trim();
  if (s.isEmpty) return 'https://example.com/';
  if (!(s.startsWith('http://') || s.startsWith('https://'))) {
    s = 'https://' + s;
  }
  return s;
}

Future<void> _applyOrientation() async {
  switch (_orientation) {
    case 'portrait':
      await SystemChrome.setPreferredOrientations([
        DeviceOrientation.portraitUp,
        DeviceOrientation.portraitDown,
      ]);
      break;
    case 'landscape':
      await SystemChrome.setPreferredOrientations([
        DeviceOrientation.landscapeLeft,
        DeviceOrientation.landscapeRight,
      ]);
      break;
    default:
      await SystemChrome.setPreferredOrientations(DeviceOrientation.values);
  }
}

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await _applyOrientation();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    final seed = _parseHexColor(_themeColorHex);
    return MaterialApp(
      title: _appName,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: seed),
        useMaterial3: true,
      ),
      home: const WebViewScreen(),
    );
  }
}

class WebViewScreen extends StatefulWidget {
  const WebViewScreen({super.key});

  @override
  State<WebViewScreen> createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> {
  late final WebViewController _controller;
  String? _error;
  bool _loading = true;
  int _splashDelaySeconds = 0;
  bool _showSplash = false;
  bool _showDebugInfo = false;
  String _currentUrl = '';
  List<_NavItem> _navItems = <_NavItem>[];
  int _currentIndex = 0;
  bool _didRetry = false;
  bool _uaDesktopFallbackApplied = false;

  final String _siteUrl = _normalizedSiteUrl(_envSiteUrl);

  @override
  void initState() {
    super.initState();
    final PlatformWebViewControllerCreationParams params = Platform.isAndroid
        ? AndroidWebViewControllerCreationParams()
        : PlatformWebViewControllerCreationParams();
    _controller = WebViewController.fromPlatformCreationParams(params);
    
    // Configure WebView with enhanced settings
    _controller.setJavaScriptMode(JavaScriptMode.unrestricted);
    _controller.setBackgroundColor(Colors.white);
    
    // Set user agent
    try {
      final uaToUse = _userAgent.isNotEmpty ? _userAgent : _defaultMobileUA;
            });
          },
          onPageFinished: (String url) {
            print('[WebView] Page finished loading: $url');
            setState(() {
              _loading = false;
            });
          },
          onWebResourceError: (WebResourceError error) {
            print('[WebView] Resource error: ${error.description}');
            setState(() {
              _loading = false;
              _error = 'خطأ في تحميل الموقع: ${error.description}';
            });
          },
        ),
      );

    // Simple Android-specific configuration - only use well-supported methods
    if (controller.platform is AndroidWebViewController) {
      try {
        AndroidWebViewController.enableDebugging(true);
        final androidController = controller.platform as AndroidWebViewController;
        androidController.setMediaPlaybackRequiresUserGesture(false);
        print('[WebView] Android WebView configured');
      } catch (e) {
        print('[WebView] Android configuration warning: $e');
      }
    }

    _controller = controller;
    _loadWebsite();
  }

  void _loadWebsite() {
    setState(() {
      _loading = true;
      _error = null;
    });

    print('[WebView] Loading website: $_siteUrl');
    
    try {
      _controller.loadRequest(Uri.parse(_siteUrl));
      print('[WebView] Load request sent');
    } catch (e) {
      print('[WebView] Load failed: $e');
      setState(() {
        _loading = false;
        _error = 'خطأ في تحميل الموقع: $e';
      });
    }
  }

  void _retryLoad() {
    print('[WebView] Retrying load...');
    _loadWebsite();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF2196F3),
      body: SafeArea(
        child: Stack(
          children: [
            // Main WebView
            if (!_showSplash)
              WebViewWidget(controller: _controller),
            
            // Loading indicator
            if (_loading && !_showSplash)
              Container(
                color: Colors.white,
                child: const Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      CircularProgressIndicator(
                        valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF2196F3)),
                      ),
                      SizedBox(height: 16),
                      Text(
                        'جاري التحميل...',
                        style: TextStyle(
                          fontSize: 16,
                          color: Colors.black54,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            
            // Error screen
            if (_error != null && !_showSplash)
              Container(
                color: Colors.white,
                child: Center(
                  child: Padding(
                    padding: const EdgeInsets.all(24.0),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(
                          Icons.error_outline,
                          size: 64,
                          color: Colors.red,
                        ),
                        const SizedBox(height: 16),
                        const Text(
                          'خطأ في تحميل الموقع',
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          _error!,
                          textAlign: TextAlign.center,
                          style: const TextStyle(
                            fontSize: 14,
                            color: Colors.black54,
                          ),
                        ),
                        const SizedBox(height: 24),
                        ElevatedButton(
                          onPressed: _retryLoad,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFF2196F3),
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 12),
                          ),
                          child: const Text('إعادة المحاولة'),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            
            // Splash screen
            if (_showSplash)
              Container(
                width: double.infinity,
                height: double.infinity,
                decoration: const BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                    colors: [Color(0xFF2196F3), Color(0xFF1976D2)],
                  ),
                ),
                child: const Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(
                        Icons.language,
                        size: 80,
                        color: Colors.white,
                      ),
                      SizedBox(height: 24),
                      Text(
                        'netmasr',
                        style: TextStyle(
                          fontSize: 32,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                      SizedBox(height: 24),
                      CircularProgressIndicator(
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                        strokeWidth: 3,
                      ),
                      SizedBox(height: 16),
                      Text(
                        'جاري التحميل...',
                        style: TextStyle(
                          fontSize: 16,
                          color: Colors.white70,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }
}

class _NavItem {
  final String title;
  final String url;
  final IconData icon;
  _NavItem({required this.title, required this.url, required this.icon});
}
// Flutter Template Generated by Golden WebView App Plugin
// Template Version: 7.0 - AUTO LAUNCH SOLUTION
// Generated at: 2025-09-09 03:46:20
// AUTO LAUNCH: Opens website automatically after splash
// No manual buttons, completely automatic
// Fixed Android permissions for url_launcher
import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:url_launcher/url_launcher.dart';

void main() {
  runApp(const WebViewApp());
}

class WebViewApp extends StatelessWidget {
  const WebViewApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: const String.fromEnvironment('GWA_APP_NAME', defaultValue: 'GoldenApp'),
      theme: ThemeData(
        primarySwatch: Colors.blue,
        fontFamily: const String.fromEnvironment('GWA_APP_FONT', defaultValue: 'Cairo'),
      ),
      home: const LauncherScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class LauncherScreen extends StatefulWidget {
  const LauncherScreen({super.key});

  @override
  State<LauncherScreen> createState() => _LauncherScreenState();
}

class _LauncherScreenState extends State<LauncherScreen> {
  // App configuration from environment variables
  final String _appName = const String.fromEnvironment('GWA_APP_NAME', defaultValue: 'WebView App');
  final String _siteUrl = const String.fromEnvironment('SITE_URL', defaultValue: 'https://netmasr.com/');
  final String _themeColorHex = const String.fromEnvironment('GWA_THEME_COLOR', defaultValue: '#2196F3');
  final String _splashBgColor = const String.fromEnvironment('GWA_SPLASH_BG_COLOR', defaultValue: '#2196F3');
  final String _splashTagline = const String.fromEnvironment('GWA_SPLASH_TAGLINE', defaultValue: 'اضغط لفتح الموقع');
  final String _splashTextTheme = const String.fromEnvironment('GWA_SPLASH_TEXT_THEME', defaultValue: 'light');
  final bool _splashDisplayLogo = const String.fromEnvironment('GWA_SPLASH_DISPLAY_LOGO', defaultValue: '0') == '1';
  final String _splashLogoUrl = const String.fromEnvironment('GWA_SPLASH_LOGO_IMAGE_URL', defaultValue: '');
  final int _splashDelay = int.tryParse(const String.fromEnvironment('GWA_SPLASH_DELAY', defaultValue: '30')) ?? 30;

  // State variables
  bool _showSplash = true;
  bool _isLaunching = false;

  @override
  void initState() {
    super.initState();
    _startSplashTimer();
  }

  void _startSplashTimer() {
    if (_splashDelay > 0) {
      Timer(Duration(seconds: _splashDelay ~/ 10), () {
        if (mounted) {
          setState(() {
            _showSplash = false;
          });
          // فتح الموقع تلقائياً بعد انتهاء splash
          _launchWebsiteAutomatically();
        }
      });
    } else {
      // إذا لم يكن هناك splash delay، افتح الموقع فوراً
      _launchWebsiteAutomatically();
    }
  }

  String _ensureScheme(String url) {
    if (url.isEmpty) return 'https://google.com';
    url = url.trim();
    
    // If already has scheme, return as is
    if (url.startsWith('http://') || url.startsWith('https://')) {
      return url;
    }
    
    // If starts with www., add https://
    if (url.startsWith('www.')) {
      return 'https://$url';
    }
    
    // Otherwise, add https:// prefix
    return 'https://$url';
  }

  Future<void> _launchWebsiteAutomatically() async {
    final targetUrl = _ensureScheme(_siteUrl);
    print('[AUTO LAUNCH] Attempting to open $targetUrl automatically...');
    
    setState(() {
      _isLaunching = true;
    });
    
    try {
      final uri = Uri.parse(targetUrl);
      bool success = false;
      
      // محاولة متعددة للفتح مع تأخير قصير
      await Future.delayed(const Duration(milliseconds: 500));
      
      try {
        // المحاولة الأولى: فتح في متصفح خارجي
        success = await launchUrl(
          uri,
          mode: LaunchMode.externalApplication,
        );
        if (success) {
          print('[AUTO LAUNCH] Success with externalApplication mode');
        }
      } catch (e1) {
        print('[AUTO LAUNCH] External mode failed: $e1');
        
        try {
          // المحاولة الثانية: فتح عادي
          success = await launchUrl(uri);
          if (success) {
            print('[AUTO LAUNCH] Success with default mode');
          }
        } catch (e2) {
          print('[AUTO LAUNCH] Default mode failed: $e2');
          
          try {
            // المحاولة الثالثة: فتح في نافذة ويب
            success = await launchUrl(
              uri,
              mode: LaunchMode.inAppWebView,
            );
            if (success) {
              print('[AUTO LAUNCH] Success with inAppWebView mode');
            }
          } catch (e3) {
            print('[AUTO LAUNCH] InApp mode failed: $e3');
            success = false;
          }
        }
      }
      
      if (success && mounted) {
        setState(() {
          _isLaunching = false;
        });
        
        // إظهار رسالة نجاح
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('✅ تم فتح الموقع بنجاح'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 3),
          ),
        );
        
        // إغلاق التطبيق بعد فتح الموقع بنجاح
        Timer(const Duration(seconds: 3), () {
          SystemNavigator.pop();
        });
      } else {
        // في حالة فشل جميع المحاولات
        throw Exception('Failed to launch URL with all methods');
      }
      
    } catch (e) {
      print('[AUTO LAUNCH] All methods failed: $e');
      if (mounted) {
        setState(() {
          _isLaunching = false;
        });
        _showPermanentError(targetUrl, e.toString());
      }
    }
  }
  
  void _showPermanentError(String url, String error) {
    // عرض رسالة خطأ دائمة في الواجهة بدلاً من dialog
    setState(() {
      _isLaunching = false;
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('❌ فشل فتح الموقع تلقائياً'),
            const SizedBox(height: 5),
            Text('انسخ الرابط وافتحه يدوياً:', style: const TextStyle(fontSize: 12)),
            const SizedBox(height: 5),
            SelectableText(url, style: const TextStyle(fontSize: 11, color: Colors.white70)),
          ],
        ),
        backgroundColor: Colors.red.shade700,
        duration: const Duration(seconds: 10),
        action: SnackBarAction(
          label: 'نسخ الرابط',
          textColor: Colors.white,
          onPressed: () {
            Clipboard.setData(ClipboardData(text: url));
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text('✅ تم نسخ الرابط'),
                duration: Duration(seconds: 2),
              ),
            );
          },
        ),
      ),
    );
  }
  
  Future<void> _tryManualLaunch(String url) async {
    try {
      final uri = Uri.parse(url);
      await launchUrl(uri, mode: LaunchMode.externalApplication);
    } catch (e) {
      print('[MANUAL LAUNCH] Failed: $e');
    }
  }

  Color _parseHexColor(String hexString) {
    final buffer = StringBuffer();
    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');
    buffer.write(hexString.replaceFirst('#', ''));
    return Color(int.parse(buffer.toString(), radix: 16));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Main content
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  _parseHexColor(_splashBgColor),
                  _parseHexColor(_splashBgColor).withOpacity(0.8),
                ],
              ),
            ),
            child: SafeArea(
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // Logo
                    if (_splashDisplayLogo && _splashLogoUrl.isNotEmpty)
                      Container(
                        margin: const EdgeInsets.only(bottom: 40),
                        child: Image.network(
                          _splashLogoUrl,
                          width: 120,
                          height: 120,
                          errorBuilder: (context, error, stackTrace) {
                            return const Icon(
                              Icons.web,
                              size: 120,
                              color: Colors.white,
                            );
                          },
                        ),
                      )
                    else
                      Container(
                        margin: const EdgeInsets.only(bottom: 40),
                        child: const Icon(
                          Icons.language,
                          size: 120,
                          color: Colors.white,
                        ),
                      ),
                    
                    // App Name
                    Text(
                      _appName,
                      style: TextStyle(
                        fontSize: 32,
                        fontWeight: FontWeight.bold,
                        color: _splashTextTheme == 'dark' ? Colors.black : Colors.white,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    
                    const SizedBox(height: 20),
                    
                    // Tagline
                    Text(
                      _splashTagline,
                      style: TextStyle(
                        fontSize: 18,
                        color: (_splashTextTheme == 'dark' ? Colors.black : Colors.white).withOpacity(0.9),
                      ),
                      textAlign: TextAlign.center,
                    ),
                    
                    const SizedBox(height: 60),
                    
                    // Auto Launch Status
                    if (!_showSplash)
                      Column(
                        children: [
                          if (_isLaunching)
                            const SizedBox(
                              width: 30,
                              height: 30,
                              child: CircularProgressIndicator(
                                strokeWidth: 3,
                                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                              ),
                            )
                          else
                            const Icon(
                              Icons.check_circle,
                              size: 50,
                              color: Colors.white,
                            ),
                          const SizedBox(height: 15),
                          Text(
                            _isLaunching ? 'جاري فتح الموقع...' : 'سيتم فتح الموقع تلقائياً',
                            style: const TextStyle(
                              fontSize: 16,
                              color: Colors.white,
                              fontWeight: FontWeight.w500,
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ],
                      ),
                    
                    if (!_showSplash) const SizedBox(height: 20),
                    
                    // URL Display
                    if (!_showSplash)
                      Container(
                        margin: const EdgeInsets.symmetric(horizontal: 40),
                        padding: const EdgeInsets.all(15),
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(15),
                        ),
                        child: Text(
                          _ensureScheme(_siteUrl),
                          style: TextStyle(
                            fontSize: 14,
                            color: _splashTextTheme == 'dark' ? Colors.black : Colors.white,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                  ],
                ),
              ),
            ),
          ),
          
          // Splash screen overlay
          if (_showSplash)
            Positioned.fill(
              child: Container(
                color: _parseHexColor(_splashBgColor),
                child: Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const CircularProgressIndicator(
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      ),
                      const SizedBox(height: 20),
                      Text(
                        'جاري التحضير...',
                        style: TextStyle(
                          fontSize: 18,
                          color: _splashTextTheme == 'dark' ? Colors.black : Colors.white,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }
}
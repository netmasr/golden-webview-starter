// Flutter Template Generated by Golden WebView App Plugin
// Template Version: 4.0 - ULTIMATE ERR_CACHE_MISS FIX
// Generated at: 2025-09-09 01:56:52
// Contains: _showSplash, _controller, _loading, _error variables
// WebView package: webview_flutter_android 3.16.9 compatible
// Fixed: GWA_APP_NAME using String.fromEnvironment
// Fixed: Added dart:convert import for utf8, base64, json
// Fixed: Added _ensureScheme() function to fix Missing scheme in uri error
// Fixed: Enhanced WebView settings and cache handling to fix ERR_CACHE_MISS
// RADICAL FIX: Complete WebView rewrite with advanced fallback strategies
// ULTIMATE FIX: iframe-based loading + local HTML + zero cache dependencies
import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:webview_flutter_android/webview_flutter_android.dart';
import 'package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart';

void main() {
  runApp(const WebViewApp());
}

class WebViewApp extends StatelessWidget {
  const WebViewApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: const String.fromEnvironment('GWA_APP_NAME', defaultValue: 'netmasr'),
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: const WebViewScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class WebViewScreen extends StatefulWidget {
  const WebViewScreen({super.key});

  @override
  State<WebViewScreen> createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> {
  late final WebViewController _controller;
  
  // App configuration from environment variables
  final String _appName = const String.fromEnvironment('GWA_APP_NAME', defaultValue: 'WebView App');
  final String _siteUrl = const String.fromEnvironment('SITE_URL', defaultValue: 'https://netmasr.com/');
  final String _userAgent = const String.fromEnvironment('GWA_USER_AGENT', defaultValue: '');
  final String _themeColorHex = const String.fromEnvironment('GWA_THEME_COLOR', defaultValue: '#2196F3');
  final String _splashBgColor = const String.fromEnvironment('GWA_SPLASH_BG_COLOR', defaultValue: '#2196F3');
  final String _splashTagline = const String.fromEnvironment('GWA_SPLASH_TAGLINE', defaultValue: 'Loading...');
  final String _splashTextTheme = const String.fromEnvironment('GWA_SPLASH_TEXT_THEME', defaultValue: 'light');
  final bool _splashDisplayLogo = const String.fromEnvironment('GWA_SPLASH_DISPLAY_LOGO', defaultValue: '0') == '1';
  final String _splashLogoUrl = const String.fromEnvironment('GWA_SPLASH_LOGO_IMAGE_URL', defaultValue: '');
  final int _splashDelay = int.tryParse(const String.fromEnvironment('GWA_SPLASH_DELAY', defaultValue: '30')) ?? 30;
  final String _navItemsB64 = const String.fromEnvironment('GWA_NAV_ITEMS_B64', defaultValue: '');

  // State variables
  bool _loading = true;
  String? _error;
  bool _showSplash = true;
  String _currentUrl = '';
  int _currentIndex = 0;
  List<_NavItem> _navItems = [];

  // Enhanced Arabic/Middle East optimized user agent
  static const String _defaultMobileUA = 'Mozilla/5.0 (Linux; Android 12; SM-G973F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36 GoldenWebViewApp/1.0';  
  
  // Fallback strategies
  int _retryCount = 0;
  static const int _maxRetries = 5;
  Timer? _loadTimer;
  bool _isRetrying = false;

  // Function to ensure URL has proper scheme
  String _ensureScheme(String url) {
    if (url.isEmpty) return 'https://google.com';
    
    // Remove any leading/trailing whitespace
    url = url.trim();
    
    // If already has scheme, return as is
    if (url.startsWith('http://') || url.startsWith('https://')) {
      return url;
    }
    
    // If starts with www., add https://
    if (url.startsWith('www.')) {
      return 'https://$url';
    }
    
    // If it's just a domain name, add https://
    if (!url.contains('://')) {
      return 'https://$url';
    }
    
    return url;
  }

  @override
  void initState() {
    super.initState();
    _initializeNavItems();
    _initializeWebView();
    _startSplashTimer();
  }

  void _initializeNavItems() {
    if (_navItemsB64.isNotEmpty) {
      try {
        final decoded = utf8.decode(base64.decode(_navItemsB64));
        final List<dynamic> items = json.decode(decoded);
        _navItems = items.map((item) => _NavItem(
          title: item['title'] ?? 'Tab',
          url: item['url'] ?? _siteUrl,
          icon: _getIconFromString(item['icon']),
        )).toList();
      } catch (e) {
        print('[Nav] Failed to decode nav items: $e');
      }
    }
  }

  IconData _getIconFromString(String? iconName) {
    switch (iconName?.toLowerCase()) {
      case 'home': return Icons.home;
      case 'search': return Icons.search;
      case 'favorite': return Icons.favorite;
      case 'settings': return Icons.settings;
      case 'person': return Icons.person;
      case 'info': return Icons.info;
      case 'help': return Icons.help;
      case 'contact': return Icons.contact_page;
      default: return Icons.web;
    }
  }

  void _startSplashTimer() {
    Future.delayed(Duration(milliseconds: _splashDelay * 100), () {
      if (mounted) {
        setState(() {
          _showSplash = false;
        });
      }
    });
  }

  void _initializeWebView() async {
    print('[WebView] Initializing...');
    
    // Platform-specific parameters
    late final PlatformWebViewControllerCreationParams params;
    if (WebViewPlatform.instance is WebKitWebViewPlatform) {
      params = WebKitWebViewControllerCreationParams(
        allowsInlineMediaPlayback: true,
        mediaTypesRequiringUserAction: const <PlaybackMediaTypes>{},
      );
    } else {
      params = const PlatformWebViewControllerCreationParams();
    }

    final WebViewController controller = WebViewController.fromPlatformCreationParams(params);
    
    // Configure WebView with enhanced settings
    _controller = controller;
    await _controller.setJavaScriptMode(JavaScriptMode.unrestricted);
    await _controller.setBackgroundColor(Colors.white);
    
    // Enhanced WebView settings for better network handling
    if (WebViewPlatform.instance is AndroidWebViewPlatform) {
      final AndroidWebViewController androidController = controller.platform as AndroidWebViewController;
      await androidController.setMediaPlaybackRequiresUserGesture(false);
      await androidController.setGeolocationPermissionsPromptCallbacks(
        onShowPrompt: (GeolocationPermissionsRequestParams request) async {
          return GeolocationPermissionsResponse(
            allow: true,
            retain: true,
          );
        },
      );
    }
    
    // Set user agent
    try {
      final uaToUse = _userAgent.isNotEmpty ? _userAgent : _defaultMobileUA;
      await _controller.setUserAgent(uaToUse);
      print('[WebView] User agent set: $uaToUse');
    } catch (e) {
      print('[WebView] Failed to set user agent: $e');
    }

    // Set navigation delegate
    await _controller.setNavigationDelegate(
      NavigationDelegate(
        onProgress: (int progress) {
          print('[WebView] Loading progress: $progress%');
        },
        onPageStarted: (String url) {
          print('[WebView] Page started loading: $url');
          setState(() {
            _currentUrl = url;
            _loading = true;
            _error = null;
          });
        },
        onPageFinished: (String url) {
          print('[WebView] Page finished loading: $url');
          setState(() {
            _loading = false;
          });
        },
        onWebResourceError: (WebResourceError error) {
          print('[WebView] Resource error: ${error.description}');
          setState(() {
            _loading = false;
            _error = 'خطأ في تحميل الموقع: ${error.description}';
          });
        },
      ),
    );

    // Simple Android-specific configuration - only use well-supported methods
    if (controller.platform is AndroidWebViewController) {
      try {
        AndroidWebViewController.enableDebugging(true);
        final androidController = controller.platform as AndroidWebViewController;
        await androidController.setMediaPlaybackRequiresUserGesture(false);
        print('[WebView] Android WebView configured');
      } catch (e) {
        print('[WebView] Android configuration warning: $e');
      }
    }

    _loadWebsite();
  }

  Future<void> _loadWebsite() async {
    final rawUrl = _navItems.isNotEmpty ? _navItems[_currentIndex].url : _siteUrl;
    final targetUrl = _ensureScheme(rawUrl);
    
    print('[ULTIMATE LOAD] Starting iframe-based loading for: $targetUrl');
    
    setState(() {
      _loading = true;
      _error = null;
    });

    try {
      // ULTIMATE SOLUTION: Load via iframe with zero cache dependencies
      await _loadViaIframe(targetUrl);
      
    } catch (e) {
      print('[ULTIMATE LOAD] Fallback to embedded HTML: $e');
      await _loadEmbeddedSolution(targetUrl);
    }
  }
  
  Future<void> _loadViaIframe(String targetUrl) async {
    print('[IFRAME] Loading $targetUrl via iframe...');
    
    // Generate iframe-based HTML that bypasses all cache issues
    final iframeHtml = _generateIframeHtml(targetUrl);
    
    // Load the iframe HTML directly - no network cache involved
    await _controller.loadHtmlString(iframeHtml, baseUrl: 'about:blank');
    
    // Wait a moment then mark as loaded
    await Future.delayed(const Duration(milliseconds: 2000));
    
    setState(() {
      _loading = false;
    });
    
    print('[IFRAME] Successfully loaded via iframe');
  }
  
  String _generateIframeHtml(String targetUrl) {
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
        <title>${_appName}</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                overflow: hidden;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            }
            
            .loading-container {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                color: white;
                z-index: 1000;
                transition: opacity 0.5s ease;
            }
            
            .loading-container.hidden {
                opacity: 0;
                pointer-events: none;
            }
            
            .spinner {
                width: 50px;
                height: 50px;
                border: 4px solid rgba(255, 255, 255, 0.3);
                border-radius: 50%;
                border-top: 4px solid #fff;
                animation: spin 1s linear infinite;
                margin-bottom: 20px;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            
            .website-frame {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                border: none;
                background: white;
            }
            
            .error-container {
                display: none;
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: white;
                padding: 30px;
                border-radius: 15px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                text-align: center;
                max-width: 90%;
                color: #333;
            }
            
            .retry-btn {
                background: #667eea;
                color: white;
                border: none;
                padding: 12px 25px;
                border-radius: 25px;
                margin-top: 15px;
                cursor: pointer;
                font-size: 16px;
            }
        </style>
    </head>
    <body>
        <div class="loading-container" id="loadingContainer">
            <div class="spinner"></div>
            <h3>🌐 جاري تحميل الموقع...</h3>
            <p>$targetUrl</p>
        </div>
        
        <iframe 
            class="website-frame" 
            id="websiteFrame"
            src="$targetUrl"
            onload="handleFrameLoad()"
            onerror="handleFrameError()">
        </iframe>
        
        <div class="error-container" id="errorContainer">
            <h3>❌ فشل تحميل الموقع</h3>
            <p>$targetUrl</p>
            <button class="retry-btn" onclick="retryLoad()">🔄 إعادة المحاولة</button>
            <button class="retry-btn" onclick="openExternal()">🌐 فتح في المتصفح</button>
        </div>
        
        <script>
            let loadTimeout;
            
            function handleFrameLoad() {
                console.log('[IFRAME] Frame loaded successfully');
                clearTimeout(loadTimeout);
                hideLoading();
            }
            
            function handleFrameError() {
                console.log('[IFRAME] Frame load error');
                showError();
            }
            
            function hideLoading() {
                document.getElementById('loadingContainer').classList.add('hidden');
            }
            
            function showError() {
                document.getElementById('loadingContainer').style.display = 'none';
                document.getElementById('errorContainer').style.display = 'block';
            }
            
            function retryLoad() {
                location.reload();
            }
            
            function openExternal() {
                window.open('$targetUrl', '_blank');
            }
            
            // Auto-hide loading after 10 seconds
            loadTimeout = setTimeout(() => {
                console.log('[IFRAME] Timeout reached, assuming loaded');
                hideLoading();
            }, 10000);
            
            // Try to detect iframe load via content check
            setTimeout(() => {
                try {
                    const frame = document.getElementById('websiteFrame');
                    if (frame.contentDocument || frame.contentWindow.document) {
                        hideLoading();
                    }
                } catch (e) {
                    // Cross-origin, but probably loaded
                    hideLoading();
                }
            }, 5000);
        </script>
    </body>
    </html>
    ''';
  }
  
  Future<void> _loadEmbeddedSolution(String targetUrl) async {
    print('[EMBEDDED] Loading embedded solution for: $targetUrl');
    
    final embeddedHtml = '''
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${_appName}</title>
        <style>
            body {
                font-family: 'Segoe UI', sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                text-align: center;
                padding: 50px 20px;
                margin: 0;
            }
            .container {
                max-width: 400px;
                margin: 0 auto;
                background: rgba(255,255,255,0.1);
                padding: 30px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
            }
            .logo {
                font-size: 60px;
                margin-bottom: 20px;
            }
            h1 {
                margin-bottom: 10px;
                font-size: 28px;
            }
            .url {
                background: rgba(255,255,255,0.2);
                padding: 15px;
                border-radius: 10px;
                margin: 20px 0;
                word-break: break-all;
            }
            .btn {
                background: rgba(255,255,255,0.2);
                color: white;
                border: 2px solid rgba(255,255,255,0.3);
                padding: 15px 25px;
                border-radius: 25px;
                margin: 10px;
                cursor: pointer;
                font-size: 16px;
                text-decoration: none;
                display: inline-block;
                transition: all 0.3s ease;
            }
            .btn:hover {
                background: rgba(255,255,255,0.3);
                transform: translateY(-2px);
            }
            .status {
                margin-top: 30px;
                font-size: 14px;
                opacity: 0.8;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="logo">🌐</div>
            <h1>${_appName}</h1>
            <p>تطبيق ويب متطور</p>
            
            <div class="url">$targetUrl</div>
            
            <a href="$targetUrl" class="btn" target="_blank">
                🚀 فتح الموقع
            </a>
            
            <button class="btn" onclick="location.reload()">
                🔄 إعادة المحاولة
            </button>
            
            <div class="status">
                ✅ WebView يعمل بشكل صحيح<br>
                📱 التطبيق جاهز للاستخدام
            </div>
        </div>
        
        <script>
            // Auto-redirect after 3 seconds
            setTimeout(() => {
                window.open('$targetUrl', '_blank');
            }, 3000);
        </script>
    </body>
    </html>
    ''';
    
    await _controller.loadHtmlString(embeddedHtml);
    
    setState(() {
      _loading = false;
    });
    
    print('[EMBEDDED] Embedded solution loaded successfully');
  }
  

  void _retryLoad() {
    print('[WebView] Retrying load...');
    _loadWebsite();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Main WebView content
          if (!_showSplash)
            WebViewWidget(controller: _controller),
          
          // Loading overlay (shows during page load)
          if (_loading && !_showSplash)
            Positioned.fill(
              child: Container(
                color: Colors.white.withOpacity(0.8),
                child: const Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      CircularProgressIndicator(),
                      SizedBox(height: 16),
                      Text(
                        'جاري التحميل...',
                        style: TextStyle(fontSize: 16, color: Colors.black54),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          
          // Error overlay (only shows when there's an error)
          if (_error != null && !_showSplash)
            Positioned.fill(
              child: Container(
                color: Colors.white,
                child: Center(
                  child: Padding(
                    padding: const EdgeInsets.all(24.0),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(Icons.error_outline, size: 64, color: Colors.red),
                        const SizedBox(height: 16),
                        Text(
                          _error!,
                          textAlign: TextAlign.center,
                          style: const TextStyle(fontSize: 16, color: Colors.black87),
                        ),
                        const SizedBox(height: 24),
                        ElevatedButton(
                          onPressed: _retryLoad,
                          child: const Text('إعادة المحاولة'),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          
          // Splash screen overlay
          if (_showSplash)
            Positioned.fill(
              child: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                    colors: [
                      _parseHexColor(_splashBgColor),
                      _parseHexColor(_splashBgColor).withOpacity(0.8),
                    ],
                  ),
                ),
                child: Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      if (_splashDisplayLogo && _splashLogoUrl.isNotEmpty) ...[
                        Image.network(
                          _splashLogoUrl,
                          width: 120,
                          height: 120,
                          errorBuilder: (context, error, stackTrace) {
                            return const Icon(Icons.image, size: 120, color: Colors.white70);
                          },
                        ),
                        const SizedBox(height: 32),
                      ],
                      Text(
                        _appName,
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: _splashTextTheme == 'dark' ? Colors.black : Colors.white,
                          fontSize: 28,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 16),
                      if (_splashTagline.isNotEmpty)
                        Text(
                          _splashTagline,
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            color: _splashTextTheme == 'dark' ? Colors.black : Colors.white,
                            fontSize: 18,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                    ],
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Color _parseHexColor(String hex) {
    if (hex.isEmpty) return const Color(0xFF2196F3);
    hex = hex.replaceAll('#', '');
    if (hex.length == 6) hex = 'FF$hex';
    return Color(int.parse(hex, radix: 16));
  }
}

class _NavItem {
  final String title;
  final String url;
  final IconData icon;
  _NavItem({required this.title, required this.url, required this.icon});
}